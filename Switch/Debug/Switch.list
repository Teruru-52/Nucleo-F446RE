
Switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bbc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002d80  08002d80  00012d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e0c  08002e0c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002e0c  08002e0c  00012e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e14  08002e14  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e14  08002e14  00012e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e18  08002e18  00012e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  08002e8c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002e8c  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c002  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a9f  00000000  00000000  0002c0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0002db48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  0002e290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002235a  00000000  00000000  0002e940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009dfd  00000000  00000000  00050c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9ab8  00000000  00000000  0005aa97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012454f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000236c  00000000  00000000  001245a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002d68 	.word	0x08002d68

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08002d68 	.word	0x08002d68

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 faa2 	bl	8000a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f822 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8b8 	bl	800067c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050c:	f000 f88c 	bl	8000628 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <main+0x44>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f001 feff 	bl	800231c <setbuf>
//	  }
//	  else{
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
//	  }

	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 800051e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000522:	4808      	ldr	r0, [pc, #32]	; (8000544 <main+0x48>)
 8000524:	f000 fda0 	bl	8001068 <HAL_GPIO_ReadPin>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d1f7      	bne.n	800051e <main+0x22>
	  	  printf("Hello World!\r\n");
 800052e:	4806      	ldr	r0, [pc, #24]	; (8000548 <main+0x4c>)
 8000530:	f001 feec 	bl	800230c <puts>
	  	  HAL_Delay(1000);
 8000534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000538:	f000 faf8 	bl	8000b2c <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 800053c:	e7ef      	b.n	800051e <main+0x22>
 800053e:	bf00      	nop
 8000540:	2000000c 	.word	0x2000000c
 8000544:	40020800 	.word	0x40020800
 8000548:	08002d80 	.word	0x08002d80

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	; 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 031c 	add.w	r3, r7, #28
 8000556:	2234      	movs	r2, #52	; 0x34
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fe60 	bl	8002220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b2a      	ldr	r3, [pc, #168]	; (8000620 <SystemClock_Config+0xd4>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a29      	ldr	r2, [pc, #164]	; (8000620 <SystemClock_Config+0xd4>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b27      	ldr	r3, [pc, #156]	; (8000620 <SystemClock_Config+0xd4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800058c:	2300      	movs	r3, #0
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <SystemClock_Config+0xd8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000598:	4a22      	ldr	r2, [pc, #136]	; (8000624 <SystemClock_Config+0xd8>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b20      	ldr	r3, [pc, #128]	; (8000624 <SystemClock_Config+0xd8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2310      	movs	r3, #16
 80005b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005c0:	2310      	movs	r3, #16
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ca:	2304      	movs	r3, #4
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 f842 	bl	8001664 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005e6:	f000 f8b7 	bl	8000758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2302      	movs	r3, #2
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2102      	movs	r1, #2
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fd60 	bl	80010cc <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000612:	f000 f8a1 	bl	8000758 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_USART2_UART_Init+0x50>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000660:	f001 fa9e 	bl	8001ba0 <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800066a:	f000 f875 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000098 	.word	0x20000098
 8000678:	40004400 	.word	0x40004400

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	4b2d      	ldr	r3, [pc, #180]	; (800074c <MX_GPIO_Init+0xd0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a2c      	ldr	r2, [pc, #176]	; (800074c <MX_GPIO_Init+0xd0>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b2a      	ldr	r3, [pc, #168]	; (800074c <MX_GPIO_Init+0xd0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <MX_GPIO_Init+0xd0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a25      	ldr	r2, [pc, #148]	; (800074c <MX_GPIO_Init+0xd0>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_GPIO_Init+0xd0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a1e      	ldr	r2, [pc, #120]	; (800074c <MX_GPIO_Init+0xd0>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a17      	ldr	r2, [pc, #92]	; (800074c <MX_GPIO_Init+0xd0>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2120      	movs	r1, #32
 8000706:	4812      	ldr	r0, [pc, #72]	; (8000750 <MX_GPIO_Init+0xd4>)
 8000708:	f000 fcc6 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000712:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <MX_GPIO_Init+0xd8>)
 8000724:	f000 fb0c 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000728:	2320      	movs	r3, #32
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_GPIO_Init+0xd4>)
 8000740:	f000 fafe 	bl	8000d40 <HAL_GPIO_Init>

}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40020000 	.word	0x40020000
 8000754:	40020800 	.word	0x40020800

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <HAL_MspInit+0x4c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <HAL_MspInit+0x4c>)
 8000774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000778:	6453      	str	r3, [r2, #68]	; 0x44
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_MspInit+0x4c>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_MspInit+0x4c>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	6413      	str	r3, [r2, #64]	; 0x40
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_MspInit+0x4c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007a2:	2007      	movs	r0, #7
 80007a4:	f000 fa98 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800

080007b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a19      	ldr	r2, [pc, #100]	; (8000838 <HAL_UART_MspInit+0x84>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d12b      	bne.n	800082e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_UART_MspInit+0x88>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_UART_MspInit+0x88>)
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_UART_MspInit+0x88>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <HAL_UART_MspInit+0x88>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <HAL_UART_MspInit+0x88>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <HAL_UART_MspInit+0x88>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800080e:	230c      	movs	r3, #12
 8000810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081e:	2307      	movs	r3, #7
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <HAL_UART_MspInit+0x8c>)
 800082a:	f000 fa89 	bl	8000d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	; 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40004400 	.word	0x40004400
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f92c 	bl	8000aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	e00a      	b.n	80008c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008aa:	f3af 8000 	nop.w
 80008ae:	4601      	mov	r1, r0
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	60ba      	str	r2, [r7, #8]
 80008b6:	b2ca      	uxtb	r2, r1
 80008b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	3301      	adds	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	dbf0      	blt.n	80008aa <_read+0x12>
	}

return len;
 80008c8:	687b      	ldr	r3, [r7, #4]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <_close>:
//	}
//	return len;
//}

int _close(int file)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b083      	sub	sp, #12
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
	return -1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008fa:	605a      	str	r2, [r3, #4]
	return 0;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <_isatty>:

int _isatty(int file)
{
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
	return 1;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
	return 0;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <_write>:
{
	errno = ENOMEM;
	return -1;
}

int _write(int file, char *ptr, int len) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 10);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	b29a      	uxth	r2, r3
 800094c:	230a      	movs	r3, #10
 800094e:	68b9      	ldr	r1, [r7, #8]
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <_write+0x24>)
 8000952:	f001 f972 	bl	8001c3a <HAL_UART_Transmit>
	return len;
 8000956:	687b      	ldr	r3, [r7, #4]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000098 	.word	0x20000098

08000964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800096c:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <_sbrk+0x5c>)
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <_sbrk+0x60>)
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <_sbrk+0x64>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <_sbrk+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	429a      	cmp	r2, r3
 8000992:	d207      	bcs.n	80009a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000994:	f001 fc1a 	bl	80021cc <__errno>
 8000998:	4603      	mov	r3, r0
 800099a:	220c      	movs	r2, #12
 800099c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	e009      	b.n	80009b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <_sbrk+0x64>)
 80009b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b6:	68fb      	ldr	r3, [r7, #12]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20020000 	.word	0x20020000
 80009c4:	00000400 	.word	0x00000400
 80009c8:	2000008c 	.word	0x2000008c
 80009cc:	200000f0 	.word	0x200000f0

080009d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <SystemInit+0x20>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <SystemInit+0x20>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009fa:	490e      	ldr	r1, [pc, #56]	; (8000a34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009fc:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a10:	4c0b      	ldr	r4, [pc, #44]	; (8000a40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a1e:	f7ff ffd7 	bl	80009d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a22:	f001 fbd9 	bl	80021d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a26:	f7ff fd69 	bl	80004fc <main>
  bx  lr    
 8000a2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a38:	08002e1c 	.word	0x08002e1c
  ldr r2, =_sbss
 8000a3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a40:	200000f0 	.word	0x200000f0

08000a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC_IRQHandler>
	...

08000a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <HAL_Init+0x40>)
 8000a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_Init+0x40>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <HAL_Init+0x40>)
 8000a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <HAL_Init+0x40>)
 8000a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a70:	2003      	movs	r0, #3
 8000a72:	f000 f931 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f000 f808 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a7c:	f7ff fe72 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023c00 	.word	0x40023c00

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x54>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x58>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f93b 	bl	8000d26 <HAL_SYSTICK_Config>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00e      	b.n	8000ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d80a      	bhi.n	8000ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f000 f911 	bl	8000cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000acc:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <HAL_InitTick+0x5c>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e000      	b.n	8000ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000004 	.word	0x20000004

08000aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_IncTick+0x20>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x24>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <HAL_IncTick+0x24>)
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	200000dc 	.word	0x200000dc

08000b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <HAL_GetTick+0x14>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	200000dc 	.word	0x200000dc

08000b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b34:	f7ff ffee 	bl	8000b14 <HAL_GetTick>
 8000b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b44:	d005      	beq.n	8000b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_Delay+0x44>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4413      	add	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b52:	bf00      	nop
 8000b54:	f7ff ffde 	bl	8000b14 <HAL_GetTick>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d8f7      	bhi.n	8000b54 <HAL_Delay+0x28>
  {
  }
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008

08000b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	; (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca4:	d301      	bcc.n	8000caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00f      	b.n	8000cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <SysTick_Config+0x40>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f7ff ff8e 	bl	8000bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <SysTick_Config+0x40>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <SysTick_Config+0x40>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ff47 	bl	8000b74 <__NVIC_SetPriorityGrouping>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
 8000cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d00:	f7ff ff5c 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	6978      	ldr	r0, [r7, #20]
 8000d0c:	f7ff ff8e 	bl	8000c2c <NVIC_EncodePriority>
 8000d10:	4602      	mov	r2, r0
 8000d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff5d 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ffb0 	bl	8000c94 <SysTick_Config>
 8000d34:	4603      	mov	r3, r0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
 8000d5a:	e165      	b.n	8001028 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	f040 8154 	bne.w	8001022 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d005      	beq.n	8000d92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d130      	bne.n	8000df4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	68da      	ldr	r2, [r3, #12]
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	091b      	lsrs	r3, r3, #4
 8000dde:	f003 0201 	and.w	r2, r3, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	d017      	beq.n	8000e30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d123      	bne.n	8000e84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	08da      	lsrs	r2, r3, #3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3208      	adds	r2, #8
 8000e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	220f      	movs	r2, #15
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	691a      	ldr	r2, [r3, #16]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	08da      	lsrs	r2, r3, #3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	69b9      	ldr	r1, [r7, #24]
 8000e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0203 	and.w	r2, r3, #3
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 80ae 	beq.w	8001022 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b5d      	ldr	r3, [pc, #372]	; (8001040 <HAL_GPIO_Init+0x300>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	4a5c      	ldr	r2, [pc, #368]	; (8001040 <HAL_GPIO_Init+0x300>)
 8000ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b5a      	ldr	r3, [pc, #360]	; (8001040 <HAL_GPIO_Init+0x300>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee2:	4a58      	ldr	r2, [pc, #352]	; (8001044 <HAL_GPIO_Init+0x304>)
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	089b      	lsrs	r3, r3, #2
 8000ee8:	3302      	adds	r3, #2
 8000eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4f      	ldr	r2, [pc, #316]	; (8001048 <HAL_GPIO_Init+0x308>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d025      	beq.n	8000f5a <HAL_GPIO_Init+0x21a>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4e      	ldr	r2, [pc, #312]	; (800104c <HAL_GPIO_Init+0x30c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d01f      	beq.n	8000f56 <HAL_GPIO_Init+0x216>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4d      	ldr	r2, [pc, #308]	; (8001050 <HAL_GPIO_Init+0x310>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d019      	beq.n	8000f52 <HAL_GPIO_Init+0x212>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4c      	ldr	r2, [pc, #304]	; (8001054 <HAL_GPIO_Init+0x314>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d013      	beq.n	8000f4e <HAL_GPIO_Init+0x20e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4b      	ldr	r2, [pc, #300]	; (8001058 <HAL_GPIO_Init+0x318>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d00d      	beq.n	8000f4a <HAL_GPIO_Init+0x20a>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4a      	ldr	r2, [pc, #296]	; (800105c <HAL_GPIO_Init+0x31c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d007      	beq.n	8000f46 <HAL_GPIO_Init+0x206>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a49      	ldr	r2, [pc, #292]	; (8001060 <HAL_GPIO_Init+0x320>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_GPIO_Init+0x202>
 8000f3e:	2306      	movs	r3, #6
 8000f40:	e00c      	b.n	8000f5c <HAL_GPIO_Init+0x21c>
 8000f42:	2307      	movs	r3, #7
 8000f44:	e00a      	b.n	8000f5c <HAL_GPIO_Init+0x21c>
 8000f46:	2305      	movs	r3, #5
 8000f48:	e008      	b.n	8000f5c <HAL_GPIO_Init+0x21c>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x21c>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x21c>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x21c>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x21c>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	f002 0203 	and.w	r2, r2, #3
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4093      	lsls	r3, r2
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f6c:	4935      	ldr	r1, [pc, #212]	; (8001044 <HAL_GPIO_Init+0x304>)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7a:	4b3a      	ldr	r3, [pc, #232]	; (8001064 <HAL_GPIO_Init+0x324>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f9e:	4a31      	ldr	r2, [pc, #196]	; (8001064 <HAL_GPIO_Init+0x324>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	; (8001064 <HAL_GPIO_Init+0x324>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc8:	4a26      	ldr	r2, [pc, #152]	; (8001064 <HAL_GPIO_Init+0x324>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fce:	4b25      	ldr	r3, [pc, #148]	; (8001064 <HAL_GPIO_Init+0x324>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <HAL_GPIO_Init+0x324>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_GPIO_Init+0x324>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800101c:	4a11      	ldr	r2, [pc, #68]	; (8001064 <HAL_GPIO_Init+0x324>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3301      	adds	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	2b0f      	cmp	r3, #15
 800102c:	f67f ae96 	bls.w	8000d5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40013800 	.word	0x40013800
 8001048:	40020000 	.word	0x40020000
 800104c:	40020400 	.word	0x40020400
 8001050:	40020800 	.word	0x40020800
 8001054:	40020c00 	.word	0x40020c00
 8001058:	40021000 	.word	0x40021000
 800105c:	40021400 	.word	0x40021400
 8001060:	40021800 	.word	0x40021800
 8001064:	40013c00 	.word	0x40013c00

08001068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	4013      	ands	r3, r2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e001      	b.n	800108a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010b4:	e003      	b.n	80010be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	041a      	lsls	r2, r3, #16
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	619a      	str	r2, [r3, #24]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e0cc      	b.n	800127a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010e0:	4b68      	ldr	r3, [pc, #416]	; (8001284 <HAL_RCC_ClockConfig+0x1b8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d90c      	bls.n	8001108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ee:	4b65      	ldr	r3, [pc, #404]	; (8001284 <HAL_RCC_ClockConfig+0x1b8>)
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f6:	4b63      	ldr	r3, [pc, #396]	; (8001284 <HAL_RCC_ClockConfig+0x1b8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d001      	beq.n	8001108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e0b8      	b.n	800127a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d020      	beq.n	8001156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001120:	4b59      	ldr	r3, [pc, #356]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	4a58      	ldr	r2, [pc, #352]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 8001126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800112a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	4a52      	ldr	r2, [pc, #328]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001144:	4b50      	ldr	r3, [pc, #320]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	494d      	ldr	r1, [pc, #308]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	4313      	orrs	r3, r2
 8001154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d044      	beq.n	80011ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d107      	bne.n	800117a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d119      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e07f      	b.n	800127a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d003      	beq.n	800118a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001186:	2b03      	cmp	r3, #3
 8001188:	d107      	bne.n	800119a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800118a:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d109      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e06f      	b.n	800127a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119a:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e067      	b.n	800127a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011aa:	4b37      	ldr	r3, [pc, #220]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f023 0203 	bic.w	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4934      	ldr	r1, [pc, #208]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011bc:	f7ff fcaa 	bl	8000b14 <HAL_GetTick>
 80011c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c2:	e00a      	b.n	80011da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c4:	f7ff fca6 	bl	8000b14 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e04f      	b.n	800127a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011da:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 020c 	and.w	r2, r3, #12
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d1eb      	bne.n	80011c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <HAL_RCC_ClockConfig+0x1b8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 030f 	and.w	r3, r3, #15
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d20c      	bcs.n	8001214 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <HAL_RCC_ClockConfig+0x1b8>)
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <HAL_RCC_ClockConfig+0x1b8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d001      	beq.n	8001214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e032      	b.n	800127a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	4916      	ldr	r1, [pc, #88]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	4313      	orrs	r3, r2
 8001230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d009      	beq.n	8001252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	490e      	ldr	r1, [pc, #56]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	4313      	orrs	r3, r2
 8001250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001252:	f000 f855 	bl	8001300 <HAL_RCC_GetSysClockFreq>
 8001256:	4602      	mov	r2, r0
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	490a      	ldr	r1, [pc, #40]	; (800128c <HAL_RCC_ClockConfig+0x1c0>)
 8001264:	5ccb      	ldrb	r3, [r1, r3]
 8001266:	fa22 f303 	lsr.w	r3, r2, r3
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <HAL_RCC_ClockConfig+0x1c4>)
 800126c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_RCC_ClockConfig+0x1c8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fc0a 	bl	8000a8c <HAL_InitTick>

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023c00 	.word	0x40023c00
 8001288:	40023800 	.word	0x40023800
 800128c:	08002d90 	.word	0x08002d90
 8001290:	20000000 	.word	0x20000000
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_RCC_GetHCLKFreq+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000000 	.word	0x20000000

080012b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012b4:	f7ff fff0 	bl	8001298 <HAL_RCC_GetHCLKFreq>
 80012b8:	4602      	mov	r2, r0
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	0a9b      	lsrs	r3, r3, #10
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	4903      	ldr	r1, [pc, #12]	; (80012d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012c6:	5ccb      	ldrb	r3, [r1, r3]
 80012c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	08002da0 	.word	0x08002da0

080012d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012dc:	f7ff ffdc 	bl	8001298 <HAL_RCC_GetHCLKFreq>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	0b5b      	lsrs	r3, r3, #13
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	4903      	ldr	r1, [pc, #12]	; (80012fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80012ee:	5ccb      	ldrb	r3, [r1, r3]
 80012f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	08002da0 	.word	0x08002da0

08001300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001304:	b088      	sub	sp, #32
 8001306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800131c:	4bce      	ldr	r3, [pc, #824]	; (8001658 <HAL_RCC_GetSysClockFreq+0x358>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	2b0c      	cmp	r3, #12
 8001326:	f200 818d 	bhi.w	8001644 <HAL_RCC_GetSysClockFreq+0x344>
 800132a:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <HAL_RCC_GetSysClockFreq+0x30>)
 800132c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001330:	08001365 	.word	0x08001365
 8001334:	08001645 	.word	0x08001645
 8001338:	08001645 	.word	0x08001645
 800133c:	08001645 	.word	0x08001645
 8001340:	0800136b 	.word	0x0800136b
 8001344:	08001645 	.word	0x08001645
 8001348:	08001645 	.word	0x08001645
 800134c:	08001645 	.word	0x08001645
 8001350:	08001371 	.word	0x08001371
 8001354:	08001645 	.word	0x08001645
 8001358:	08001645 	.word	0x08001645
 800135c:	08001645 	.word	0x08001645
 8001360:	080014e5 	.word	0x080014e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001364:	4bbd      	ldr	r3, [pc, #756]	; (800165c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001366:	61bb      	str	r3, [r7, #24]
       break;
 8001368:	e16f      	b.n	800164a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800136a:	4bbd      	ldr	r3, [pc, #756]	; (8001660 <HAL_RCC_GetSysClockFreq+0x360>)
 800136c:	61bb      	str	r3, [r7, #24]
      break;
 800136e:	e16c      	b.n	800164a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001370:	4bb9      	ldr	r3, [pc, #740]	; (8001658 <HAL_RCC_GetSysClockFreq+0x358>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001378:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800137a:	4bb7      	ldr	r3, [pc, #732]	; (8001658 <HAL_RCC_GetSysClockFreq+0x358>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d053      	beq.n	800142e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001386:	4bb4      	ldr	r3, [pc, #720]	; (8001658 <HAL_RCC_GetSysClockFreq+0x358>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	099b      	lsrs	r3, r3, #6
 800138c:	461a      	mov	r2, r3
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001396:	f04f 0100 	mov.w	r1, #0
 800139a:	ea02 0400 	and.w	r4, r2, r0
 800139e:	603c      	str	r4, [r7, #0]
 80013a0:	400b      	ands	r3, r1
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013a8:	4620      	mov	r0, r4
 80013aa:	4629      	mov	r1, r5
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	014b      	lsls	r3, r1, #5
 80013b6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80013ba:	0142      	lsls	r2, r0, #5
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	4623      	mov	r3, r4
 80013c2:	1ac0      	subs	r0, r0, r3
 80013c4:	462b      	mov	r3, r5
 80013c6:	eb61 0103 	sbc.w	r1, r1, r3
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	018b      	lsls	r3, r1, #6
 80013d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80013d8:	0182      	lsls	r2, r0, #6
 80013da:	1a12      	subs	r2, r2, r0
 80013dc:	eb63 0301 	sbc.w	r3, r3, r1
 80013e0:	f04f 0000 	mov.w	r0, #0
 80013e4:	f04f 0100 	mov.w	r1, #0
 80013e8:	00d9      	lsls	r1, r3, #3
 80013ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80013ee:	00d0      	lsls	r0, r2, #3
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4621      	mov	r1, r4
 80013f6:	1852      	adds	r2, r2, r1
 80013f8:	4629      	mov	r1, r5
 80013fa:	eb43 0101 	adc.w	r1, r3, r1
 80013fe:	460b      	mov	r3, r1
 8001400:	f04f 0000 	mov.w	r0, #0
 8001404:	f04f 0100 	mov.w	r1, #0
 8001408:	0259      	lsls	r1, r3, #9
 800140a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800140e:	0250      	lsls	r0, r2, #9
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	461a      	mov	r2, r3
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	f7fe fef0 	bl	8000204 <__aeabi_uldivmod>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4613      	mov	r3, r2
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	e04c      	b.n	80014c8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800142e:	4b8a      	ldr	r3, [pc, #552]	; (8001658 <HAL_RCC_GetSysClockFreq+0x358>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	099b      	lsrs	r3, r3, #6
 8001434:	461a      	mov	r2, r3
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800143e:	f04f 0100 	mov.w	r1, #0
 8001442:	ea02 0a00 	and.w	sl, r2, r0
 8001446:	ea03 0b01 	and.w	fp, r3, r1
 800144a:	4650      	mov	r0, sl
 800144c:	4659      	mov	r1, fp
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	014b      	lsls	r3, r1, #5
 8001458:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800145c:	0142      	lsls	r2, r0, #5
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	ebb0 000a 	subs.w	r0, r0, sl
 8001466:	eb61 010b 	sbc.w	r1, r1, fp
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	018b      	lsls	r3, r1, #6
 8001474:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001478:	0182      	lsls	r2, r0, #6
 800147a:	1a12      	subs	r2, r2, r0
 800147c:	eb63 0301 	sbc.w	r3, r3, r1
 8001480:	f04f 0000 	mov.w	r0, #0
 8001484:	f04f 0100 	mov.w	r1, #0
 8001488:	00d9      	lsls	r1, r3, #3
 800148a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800148e:	00d0      	lsls	r0, r2, #3
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	eb12 020a 	adds.w	r2, r2, sl
 8001498:	eb43 030b 	adc.w	r3, r3, fp
 800149c:	f04f 0000 	mov.w	r0, #0
 80014a0:	f04f 0100 	mov.w	r1, #0
 80014a4:	0299      	lsls	r1, r3, #10
 80014a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80014aa:	0290      	lsls	r0, r2, #10
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	461a      	mov	r2, r3
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	f7fe fea2 	bl	8000204 <__aeabi_uldivmod>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4613      	mov	r3, r2
 80014c6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014c8:	4b63      	ldr	r3, [pc, #396]	; (8001658 <HAL_RCC_GetSysClockFreq+0x358>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	0c1b      	lsrs	r3, r3, #16
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	3301      	adds	r3, #1
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e0:	61bb      	str	r3, [r7, #24]
      break;
 80014e2:	e0b2      	b.n	800164a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014e4:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <HAL_RCC_GetSysClockFreq+0x358>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014ec:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014ee:	4b5a      	ldr	r3, [pc, #360]	; (8001658 <HAL_RCC_GetSysClockFreq+0x358>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d04d      	beq.n	8001596 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fa:	4b57      	ldr	r3, [pc, #348]	; (8001658 <HAL_RCC_GetSysClockFreq+0x358>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	099b      	lsrs	r3, r3, #6
 8001500:	461a      	mov	r2, r3
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	f240 10ff 	movw	r0, #511	; 0x1ff
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	ea02 0800 	and.w	r8, r2, r0
 8001512:	ea03 0901 	and.w	r9, r3, r1
 8001516:	4640      	mov	r0, r8
 8001518:	4649      	mov	r1, r9
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	f04f 0300 	mov.w	r3, #0
 8001522:	014b      	lsls	r3, r1, #5
 8001524:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001528:	0142      	lsls	r2, r0, #5
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	ebb0 0008 	subs.w	r0, r0, r8
 8001532:	eb61 0109 	sbc.w	r1, r1, r9
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	018b      	lsls	r3, r1, #6
 8001540:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001544:	0182      	lsls	r2, r0, #6
 8001546:	1a12      	subs	r2, r2, r0
 8001548:	eb63 0301 	sbc.w	r3, r3, r1
 800154c:	f04f 0000 	mov.w	r0, #0
 8001550:	f04f 0100 	mov.w	r1, #0
 8001554:	00d9      	lsls	r1, r3, #3
 8001556:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800155a:	00d0      	lsls	r0, r2, #3
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	eb12 0208 	adds.w	r2, r2, r8
 8001564:	eb43 0309 	adc.w	r3, r3, r9
 8001568:	f04f 0000 	mov.w	r0, #0
 800156c:	f04f 0100 	mov.w	r1, #0
 8001570:	0259      	lsls	r1, r3, #9
 8001572:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001576:	0250      	lsls	r0, r2, #9
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	461a      	mov	r2, r3
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	f7fe fe3c 	bl	8000204 <__aeabi_uldivmod>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4613      	mov	r3, r2
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	e04a      	b.n	800162c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <HAL_RCC_GetSysClockFreq+0x358>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	099b      	lsrs	r3, r3, #6
 800159c:	461a      	mov	r2, r3
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015a6:	f04f 0100 	mov.w	r1, #0
 80015aa:	ea02 0400 	and.w	r4, r2, r0
 80015ae:	ea03 0501 	and.w	r5, r3, r1
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	014b      	lsls	r3, r1, #5
 80015c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015c4:	0142      	lsls	r2, r0, #5
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	1b00      	subs	r0, r0, r4
 80015cc:	eb61 0105 	sbc.w	r1, r1, r5
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	018b      	lsls	r3, r1, #6
 80015da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015de:	0182      	lsls	r2, r0, #6
 80015e0:	1a12      	subs	r2, r2, r0
 80015e2:	eb63 0301 	sbc.w	r3, r3, r1
 80015e6:	f04f 0000 	mov.w	r0, #0
 80015ea:	f04f 0100 	mov.w	r1, #0
 80015ee:	00d9      	lsls	r1, r3, #3
 80015f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015f4:	00d0      	lsls	r0, r2, #3
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	1912      	adds	r2, r2, r4
 80015fc:	eb45 0303 	adc.w	r3, r5, r3
 8001600:	f04f 0000 	mov.w	r0, #0
 8001604:	f04f 0100 	mov.w	r1, #0
 8001608:	0299      	lsls	r1, r3, #10
 800160a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800160e:	0290      	lsls	r0, r2, #10
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	461a      	mov	r2, r3
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	f7fe fdf0 	bl	8000204 <__aeabi_uldivmod>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4613      	mov	r3, r2
 800162a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <HAL_RCC_GetSysClockFreq+0x358>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	0f1b      	lsrs	r3, r3, #28
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001640:	61bb      	str	r3, [r7, #24]
      break;
 8001642:	e002      	b.n	800164a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001646:	61bb      	str	r3, [r7, #24]
      break;
 8001648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800164a:	69bb      	ldr	r3, [r7, #24]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	00f42400 	.word	0x00f42400
 8001660:	007a1200 	.word	0x007a1200

08001664 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e28d      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 8083 	beq.w	800178a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001684:	4b94      	ldr	r3, [pc, #592]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b04      	cmp	r3, #4
 800168e:	d019      	beq.n	80016c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001690:	4b91      	ldr	r3, [pc, #580]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001698:	2b08      	cmp	r3, #8
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800169c:	4b8e      	ldr	r3, [pc, #568]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016a8:	d00c      	beq.n	80016c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016aa:	4b8b      	ldr	r3, [pc, #556]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	d112      	bne.n	80016dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b6:	4b88      	ldr	r3, [pc, #544]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016c2:	d10b      	bne.n	80016dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	4b84      	ldr	r3, [pc, #528]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d05b      	beq.n	8001788 <HAL_RCC_OscConfig+0x124>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d157      	bne.n	8001788 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e25a      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e4:	d106      	bne.n	80016f4 <HAL_RCC_OscConfig+0x90>
 80016e6:	4b7c      	ldr	r3, [pc, #496]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a7b      	ldr	r2, [pc, #492]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 80016ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e01d      	b.n	8001730 <HAL_RCC_OscConfig+0xcc>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0xb4>
 80016fe:	4b76      	ldr	r3, [pc, #472]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a75      	ldr	r2, [pc, #468]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 8001704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b73      	ldr	r3, [pc, #460]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a72      	ldr	r2, [pc, #456]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0xcc>
 8001718:	4b6f      	ldr	r3, [pc, #444]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a6e      	ldr	r2, [pc, #440]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 800171e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b6c      	ldr	r3, [pc, #432]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a6b      	ldr	r2, [pc, #428]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 800172a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d013      	beq.n	8001760 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff f9ec 	bl	8000b14 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff f9e8 	bl	8000b14 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	; 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e21f      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b61      	ldr	r3, [pc, #388]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0xdc>
 800175e:	e014      	b.n	800178a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff f9d8 	bl	8000b14 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff f9d4 	bl	8000b14 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e20b      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	4b57      	ldr	r3, [pc, #348]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x104>
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d06f      	beq.n	8001876 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001796:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d017      	beq.n	80017d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017a2:	4b4d      	ldr	r3, [pc, #308]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d105      	bne.n	80017ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017ae:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ba:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d11c      	bne.n	8001800 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c6:	4b44      	ldr	r3, [pc, #272]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x186>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e1d3      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4937      	ldr	r1, [pc, #220]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	e03a      	b.n	8001876 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001808:	4b34      	ldr	r3, [pc, #208]	; (80018dc <HAL_RCC_OscConfig+0x278>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7ff f981 	bl	8000b14 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001816:	f7ff f97d 	bl	8000b14 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e1b4      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4925      	ldr	r1, [pc, #148]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_RCC_OscConfig+0x278>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff f960 	bl	8000b14 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff f95c 	bl	8000b14 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e193      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d036      	beq.n	80018f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d016      	beq.n	80018b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_RCC_OscConfig+0x27c>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001890:	f7ff f940 	bl	8000b14 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff f93c 	bl	8000b14 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e173      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 80018ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x234>
 80018b6:	e01b      	b.n	80018f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_RCC_OscConfig+0x27c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7ff f929 	bl	8000b14 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	e00e      	b.n	80018e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c6:	f7ff f925 	bl	8000b14 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d907      	bls.n	80018e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e15c      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
 80018d8:	40023800 	.word	0x40023800
 80018dc:	42470000 	.word	0x42470000
 80018e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e4:	4b8a      	ldr	r3, [pc, #552]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 80018e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ea      	bne.n	80018c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8097 	beq.w	8001a2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001902:	4b83      	ldr	r3, [pc, #524]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10f      	bne.n	800192e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	4b7f      	ldr	r3, [pc, #508]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a7e      	ldr	r2, [pc, #504]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b7c      	ldr	r3, [pc, #496]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192a:	2301      	movs	r3, #1
 800192c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192e:	4b79      	ldr	r3, [pc, #484]	; (8001b14 <HAL_RCC_OscConfig+0x4b0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001936:	2b00      	cmp	r3, #0
 8001938:	d118      	bne.n	800196c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193a:	4b76      	ldr	r3, [pc, #472]	; (8001b14 <HAL_RCC_OscConfig+0x4b0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a75      	ldr	r2, [pc, #468]	; (8001b14 <HAL_RCC_OscConfig+0x4b0>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001946:	f7ff f8e5 	bl	8000b14 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194e:	f7ff f8e1 	bl	8000b14 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e118      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	4b6c      	ldr	r3, [pc, #432]	; (8001b14 <HAL_RCC_OscConfig+0x4b0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x31e>
 8001974:	4b66      	ldr	r3, [pc, #408]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001978:	4a65      	ldr	r2, [pc, #404]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6713      	str	r3, [r2, #112]	; 0x70
 8001980:	e01c      	b.n	80019bc <HAL_RCC_OscConfig+0x358>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b05      	cmp	r3, #5
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x340>
 800198a:	4b61      	ldr	r3, [pc, #388]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a60      	ldr	r2, [pc, #384]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
 8001996:	4b5e      	ldr	r3, [pc, #376]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a5d      	ldr	r2, [pc, #372]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
 80019a2:	e00b      	b.n	80019bc <HAL_RCC_OscConfig+0x358>
 80019a4:	4b5a      	ldr	r3, [pc, #360]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a8:	4a59      	ldr	r2, [pc, #356]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	6713      	str	r3, [r2, #112]	; 0x70
 80019b0:	4b57      	ldr	r3, [pc, #348]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	4a56      	ldr	r2, [pc, #344]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 80019b6:	f023 0304 	bic.w	r3, r3, #4
 80019ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d015      	beq.n	80019f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff f8a6 	bl	8000b14 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019cc:	f7ff f8a2 	bl	8000b14 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e0d7      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e2:	4b4b      	ldr	r3, [pc, #300]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0ee      	beq.n	80019cc <HAL_RCC_OscConfig+0x368>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff f890 	bl	8000b14 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff f88c 	bl	8000b14 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e0c1      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0e:	4b40      	ldr	r3, [pc, #256]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ee      	bne.n	80019f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a20:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	4a3a      	ldr	r2, [pc, #232]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 8001a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80ad 	beq.w	8001b90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a36:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d060      	beq.n	8001b04 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d145      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <HAL_RCC_OscConfig+0x4b4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f860 	bl	8000b14 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f85c 	bl	8000b14 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e093      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69da      	ldr	r2, [r3, #28]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	019b      	lsls	r3, r3, #6
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	085b      	lsrs	r3, r3, #1
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	041b      	lsls	r3, r3, #16
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	071b      	lsls	r3, r3, #28
 8001aa2:	491b      	ldr	r1, [pc, #108]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <HAL_RCC_OscConfig+0x4b4>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff f831 	bl	8000b14 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff f82d 	bl	8000b14 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e064      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x452>
 8001ad4:	e05c      	b.n	8001b90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_RCC_OscConfig+0x4b4>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff f81a 	bl	8000b14 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff f816 	bl	8000b14 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e04d      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x480>
 8001b02:	e045      	b.n	8001b90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e040      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40007000 	.word	0x40007000
 8001b18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <HAL_RCC_OscConfig+0x538>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d030      	beq.n	8001b8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d129      	bne.n	8001b8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d122      	bne.n	8001b8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d119      	bne.n	8001b8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	085b      	lsrs	r3, r3, #1
 8001b64:	3b01      	subs	r3, #1
 8001b66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d10f      	bne.n	8001b8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e03f      	b.n	8001c32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7fe fdf4 	bl	80007b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2224      	movs	r2, #36	; 0x24
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f929 	bl	8001e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b08a      	sub	sp, #40	; 0x28
 8001c3e:	af02      	add	r7, sp, #8
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	4613      	mov	r3, r2
 8001c48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b20      	cmp	r3, #32
 8001c58:	d17c      	bne.n	8001d54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <HAL_UART_Transmit+0x2c>
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e075      	b.n	8001d56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_UART_Transmit+0x3e>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e06e      	b.n	8001d56 <HAL_UART_Transmit+0x11c>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2221      	movs	r2, #33	; 0x21
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c8e:	f7fe ff41 	bl	8000b14 <HAL_GetTick>
 8001c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	88fa      	ldrh	r2, [r7, #6]
 8001c98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	88fa      	ldrh	r2, [r7, #6]
 8001c9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca8:	d108      	bne.n	8001cbc <HAL_UART_Transmit+0x82>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d104      	bne.n	8001cbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	e003      	b.n	8001cc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ccc:	e02a      	b.n	8001d24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2180      	movs	r1, #128	; 0x80
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 f840 	bl	8001d5e <UART_WaitOnFlagUntilTimeout>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e036      	b.n	8001d56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10b      	bne.n	8001d06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	3302      	adds	r3, #2
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	e007      	b.n	8001d16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	781a      	ldrb	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	3301      	adds	r3, #1
 8001d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1cf      	bne.n	8001cce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2200      	movs	r2, #0
 8001d36:	2140      	movs	r1, #64	; 0x40
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 f810 	bl	8001d5e <UART_WaitOnFlagUntilTimeout>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e006      	b.n	8001d56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e000      	b.n	8001d56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d54:	2302      	movs	r3, #2
  }
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3720      	adds	r7, #32
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b090      	sub	sp, #64	; 0x40
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d6e:	e050      	b.n	8001e12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d76:	d04c      	beq.n	8001e12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <UART_WaitOnFlagUntilTimeout+0x30>
 8001d7e:	f7fe fec9 	bl	8000b14 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d241      	bcs.n	8001e12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	330c      	adds	r3, #12
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d98:	e853 3f00 	ldrex	r3, [r3]
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	330c      	adds	r3, #12
 8001dac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dae:	637a      	str	r2, [r7, #52]	; 0x34
 8001db0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001db2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001db6:	e841 2300 	strex	r3, r2, [r1]
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1e5      	bne.n	8001d8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3314      	adds	r3, #20
 8001dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	e853 3f00 	ldrex	r3, [r3]
 8001dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3314      	adds	r3, #20
 8001de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001de2:	623a      	str	r2, [r7, #32]
 8001de4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001de6:	69f9      	ldr	r1, [r7, #28]
 8001de8:	6a3a      	ldr	r2, [r7, #32]
 8001dea:	e841 2300 	strex	r3, r2, [r1]
 8001dee:	61bb      	str	r3, [r7, #24]
   return(result);
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1e5      	bne.n	8001dc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2220      	movs	r2, #32
 8001e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e00f      	b.n	8001e32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	bf0c      	ite	eq
 8001e22:	2301      	moveq	r3, #1
 8001e24:	2300      	movne	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d09f      	beq.n	8001d70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3740      	adds	r7, #64	; 0x40
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e40:	b09f      	sub	sp, #124	; 0x7c
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e52:	68d9      	ldr	r1, [r3, #12]
 8001e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	ea40 0301 	orr.w	r3, r0, r1
 8001e5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e80:	f021 010c 	bic.w	r1, r1, #12
 8001e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e8a:	430b      	orrs	r3, r1
 8001e8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e9a:	6999      	ldr	r1, [r3, #24]
 8001e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	ea40 0301 	orr.w	r3, r0, r1
 8001ea4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4bc5      	ldr	r3, [pc, #788]	; (80021c0 <UART_SetConfig+0x384>)
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d004      	beq.n	8001eba <UART_SetConfig+0x7e>
 8001eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4bc3      	ldr	r3, [pc, #780]	; (80021c4 <UART_SetConfig+0x388>)
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d103      	bne.n	8001ec2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001eba:	f7ff fa0d 	bl	80012d8 <HAL_RCC_GetPCLK2Freq>
 8001ebe:	6778      	str	r0, [r7, #116]	; 0x74
 8001ec0:	e002      	b.n	8001ec8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ec2:	f7ff f9f5 	bl	80012b0 <HAL_RCC_GetPCLK1Freq>
 8001ec6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ed0:	f040 80b6 	bne.w	8002040 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ed6:	461c      	mov	r4, r3
 8001ed8:	f04f 0500 	mov.w	r5, #0
 8001edc:	4622      	mov	r2, r4
 8001ede:	462b      	mov	r3, r5
 8001ee0:	1891      	adds	r1, r2, r2
 8001ee2:	6439      	str	r1, [r7, #64]	; 0x40
 8001ee4:	415b      	adcs	r3, r3
 8001ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ee8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001eec:	1912      	adds	r2, r2, r4
 8001eee:	eb45 0303 	adc.w	r3, r5, r3
 8001ef2:	f04f 0000 	mov.w	r0, #0
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	00d9      	lsls	r1, r3, #3
 8001efc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f00:	00d0      	lsls	r0, r2, #3
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	1911      	adds	r1, r2, r4
 8001f08:	6639      	str	r1, [r7, #96]	; 0x60
 8001f0a:	416b      	adcs	r3, r5
 8001f0c:	667b      	str	r3, [r7, #100]	; 0x64
 8001f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	1891      	adds	r1, r2, r2
 8001f1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f1c:	415b      	adcs	r3, r3
 8001f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f24:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001f28:	f7fe f96c 	bl	8000204 <__aeabi_uldivmod>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4ba5      	ldr	r3, [pc, #660]	; (80021c8 <UART_SetConfig+0x38c>)
 8001f32:	fba3 2302 	umull	r2, r3, r3, r2
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	011e      	lsls	r6, r3, #4
 8001f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f3c:	461c      	mov	r4, r3
 8001f3e:	f04f 0500 	mov.w	r5, #0
 8001f42:	4622      	mov	r2, r4
 8001f44:	462b      	mov	r3, r5
 8001f46:	1891      	adds	r1, r2, r2
 8001f48:	6339      	str	r1, [r7, #48]	; 0x30
 8001f4a:	415b      	adcs	r3, r3
 8001f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f52:	1912      	adds	r2, r2, r4
 8001f54:	eb45 0303 	adc.w	r3, r5, r3
 8001f58:	f04f 0000 	mov.w	r0, #0
 8001f5c:	f04f 0100 	mov.w	r1, #0
 8001f60:	00d9      	lsls	r1, r3, #3
 8001f62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f66:	00d0      	lsls	r0, r2, #3
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	1911      	adds	r1, r2, r4
 8001f6e:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f70:	416b      	adcs	r3, r5
 8001f72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	1891      	adds	r1, r2, r2
 8001f80:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f82:	415b      	adcs	r3, r3
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001f8e:	f7fe f939 	bl	8000204 <__aeabi_uldivmod>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4b8c      	ldr	r3, [pc, #560]	; (80021c8 <UART_SetConfig+0x38c>)
 8001f98:	fba3 1302 	umull	r1, r3, r3, r2
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	2164      	movs	r1, #100	; 0x64
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	3332      	adds	r3, #50	; 0x32
 8001faa:	4a87      	ldr	r2, [pc, #540]	; (80021c8 <UART_SetConfig+0x38c>)
 8001fac:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001fb8:	441e      	add	r6, r3
 8001fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f04f 0100 	mov.w	r1, #0
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	1894      	adds	r4, r2, r2
 8001fc8:	623c      	str	r4, [r7, #32]
 8001fca:	415b      	adcs	r3, r3
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fd2:	1812      	adds	r2, r2, r0
 8001fd4:	eb41 0303 	adc.w	r3, r1, r3
 8001fd8:	f04f 0400 	mov.w	r4, #0
 8001fdc:	f04f 0500 	mov.w	r5, #0
 8001fe0:	00dd      	lsls	r5, r3, #3
 8001fe2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001fe6:	00d4      	lsls	r4, r2, #3
 8001fe8:	4622      	mov	r2, r4
 8001fea:	462b      	mov	r3, r5
 8001fec:	1814      	adds	r4, r2, r0
 8001fee:	653c      	str	r4, [r7, #80]	; 0x50
 8001ff0:	414b      	adcs	r3, r1
 8001ff2:	657b      	str	r3, [r7, #84]	; 0x54
 8001ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	1891      	adds	r1, r2, r2
 8002000:	61b9      	str	r1, [r7, #24]
 8002002:	415b      	adcs	r3, r3
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800200a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800200e:	f7fe f8f9 	bl	8000204 <__aeabi_uldivmod>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4b6c      	ldr	r3, [pc, #432]	; (80021c8 <UART_SetConfig+0x38c>)
 8002018:	fba3 1302 	umull	r1, r3, r3, r2
 800201c:	095b      	lsrs	r3, r3, #5
 800201e:	2164      	movs	r1, #100	; 0x64
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	3332      	adds	r3, #50	; 0x32
 800202a:	4a67      	ldr	r2, [pc, #412]	; (80021c8 <UART_SetConfig+0x38c>)
 800202c:	fba2 2303 	umull	r2, r3, r2, r3
 8002030:	095b      	lsrs	r3, r3, #5
 8002032:	f003 0207 	and.w	r2, r3, #7
 8002036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4432      	add	r2, r6
 800203c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800203e:	e0b9      	b.n	80021b4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002042:	461c      	mov	r4, r3
 8002044:	f04f 0500 	mov.w	r5, #0
 8002048:	4622      	mov	r2, r4
 800204a:	462b      	mov	r3, r5
 800204c:	1891      	adds	r1, r2, r2
 800204e:	6139      	str	r1, [r7, #16]
 8002050:	415b      	adcs	r3, r3
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002058:	1912      	adds	r2, r2, r4
 800205a:	eb45 0303 	adc.w	r3, r5, r3
 800205e:	f04f 0000 	mov.w	r0, #0
 8002062:	f04f 0100 	mov.w	r1, #0
 8002066:	00d9      	lsls	r1, r3, #3
 8002068:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800206c:	00d0      	lsls	r0, r2, #3
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	eb12 0804 	adds.w	r8, r2, r4
 8002076:	eb43 0905 	adc.w	r9, r3, r5
 800207a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4618      	mov	r0, r3
 8002080:	f04f 0100 	mov.w	r1, #0
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	008b      	lsls	r3, r1, #2
 800208e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002092:	0082      	lsls	r2, r0, #2
 8002094:	4640      	mov	r0, r8
 8002096:	4649      	mov	r1, r9
 8002098:	f7fe f8b4 	bl	8000204 <__aeabi_uldivmod>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <UART_SetConfig+0x38c>)
 80020a2:	fba3 2302 	umull	r2, r3, r3, r2
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	011e      	lsls	r6, r3, #4
 80020aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020ac:	4618      	mov	r0, r3
 80020ae:	f04f 0100 	mov.w	r1, #0
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	1894      	adds	r4, r2, r2
 80020b8:	60bc      	str	r4, [r7, #8]
 80020ba:	415b      	adcs	r3, r3
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020c2:	1812      	adds	r2, r2, r0
 80020c4:	eb41 0303 	adc.w	r3, r1, r3
 80020c8:	f04f 0400 	mov.w	r4, #0
 80020cc:	f04f 0500 	mov.w	r5, #0
 80020d0:	00dd      	lsls	r5, r3, #3
 80020d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80020d6:	00d4      	lsls	r4, r2, #3
 80020d8:	4622      	mov	r2, r4
 80020da:	462b      	mov	r3, r5
 80020dc:	1814      	adds	r4, r2, r0
 80020de:	64bc      	str	r4, [r7, #72]	; 0x48
 80020e0:	414b      	adcs	r3, r1
 80020e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f04f 0100 	mov.w	r1, #0
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	008b      	lsls	r3, r1, #2
 80020f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80020fc:	0082      	lsls	r2, r0, #2
 80020fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002102:	f7fe f87f 	bl	8000204 <__aeabi_uldivmod>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4b2f      	ldr	r3, [pc, #188]	; (80021c8 <UART_SetConfig+0x38c>)
 800210c:	fba3 1302 	umull	r1, r3, r3, r2
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	2164      	movs	r1, #100	; 0x64
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	3332      	adds	r3, #50	; 0x32
 800211e:	4a2a      	ldr	r2, [pc, #168]	; (80021c8 <UART_SetConfig+0x38c>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800212a:	441e      	add	r6, r3
 800212c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800212e:	4618      	mov	r0, r3
 8002130:	f04f 0100 	mov.w	r1, #0
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	1894      	adds	r4, r2, r2
 800213a:	603c      	str	r4, [r7, #0]
 800213c:	415b      	adcs	r3, r3
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002144:	1812      	adds	r2, r2, r0
 8002146:	eb41 0303 	adc.w	r3, r1, r3
 800214a:	f04f 0400 	mov.w	r4, #0
 800214e:	f04f 0500 	mov.w	r5, #0
 8002152:	00dd      	lsls	r5, r3, #3
 8002154:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002158:	00d4      	lsls	r4, r2, #3
 800215a:	4622      	mov	r2, r4
 800215c:	462b      	mov	r3, r5
 800215e:	eb12 0a00 	adds.w	sl, r2, r0
 8002162:	eb43 0b01 	adc.w	fp, r3, r1
 8002166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4618      	mov	r0, r3
 800216c:	f04f 0100 	mov.w	r1, #0
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	008b      	lsls	r3, r1, #2
 800217a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800217e:	0082      	lsls	r2, r0, #2
 8002180:	4650      	mov	r0, sl
 8002182:	4659      	mov	r1, fp
 8002184:	f7fe f83e 	bl	8000204 <__aeabi_uldivmod>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <UART_SetConfig+0x38c>)
 800218e:	fba3 1302 	umull	r1, r3, r3, r2
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	2164      	movs	r1, #100	; 0x64
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	3332      	adds	r3, #50	; 0x32
 80021a0:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <UART_SetConfig+0x38c>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	f003 020f 	and.w	r2, r3, #15
 80021ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4432      	add	r2, r6
 80021b2:	609a      	str	r2, [r3, #8]
}
 80021b4:	bf00      	nop
 80021b6:	377c      	adds	r7, #124	; 0x7c
 80021b8:	46bd      	mov	sp, r7
 80021ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021be:	bf00      	nop
 80021c0:	40011000 	.word	0x40011000
 80021c4:	40011400 	.word	0x40011400
 80021c8:	51eb851f 	.word	0x51eb851f

080021cc <__errno>:
 80021cc:	4b01      	ldr	r3, [pc, #4]	; (80021d4 <__errno+0x8>)
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	2000000c 	.word	0x2000000c

080021d8 <__libc_init_array>:
 80021d8:	b570      	push	{r4, r5, r6, lr}
 80021da:	4d0d      	ldr	r5, [pc, #52]	; (8002210 <__libc_init_array+0x38>)
 80021dc:	4c0d      	ldr	r4, [pc, #52]	; (8002214 <__libc_init_array+0x3c>)
 80021de:	1b64      	subs	r4, r4, r5
 80021e0:	10a4      	asrs	r4, r4, #2
 80021e2:	2600      	movs	r6, #0
 80021e4:	42a6      	cmp	r6, r4
 80021e6:	d109      	bne.n	80021fc <__libc_init_array+0x24>
 80021e8:	4d0b      	ldr	r5, [pc, #44]	; (8002218 <__libc_init_array+0x40>)
 80021ea:	4c0c      	ldr	r4, [pc, #48]	; (800221c <__libc_init_array+0x44>)
 80021ec:	f000 fdbc 	bl	8002d68 <_init>
 80021f0:	1b64      	subs	r4, r4, r5
 80021f2:	10a4      	asrs	r4, r4, #2
 80021f4:	2600      	movs	r6, #0
 80021f6:	42a6      	cmp	r6, r4
 80021f8:	d105      	bne.n	8002206 <__libc_init_array+0x2e>
 80021fa:	bd70      	pop	{r4, r5, r6, pc}
 80021fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002200:	4798      	blx	r3
 8002202:	3601      	adds	r6, #1
 8002204:	e7ee      	b.n	80021e4 <__libc_init_array+0xc>
 8002206:	f855 3b04 	ldr.w	r3, [r5], #4
 800220a:	4798      	blx	r3
 800220c:	3601      	adds	r6, #1
 800220e:	e7f2      	b.n	80021f6 <__libc_init_array+0x1e>
 8002210:	08002e14 	.word	0x08002e14
 8002214:	08002e14 	.word	0x08002e14
 8002218:	08002e14 	.word	0x08002e14
 800221c:	08002e18 	.word	0x08002e18

08002220 <memset>:
 8002220:	4402      	add	r2, r0
 8002222:	4603      	mov	r3, r0
 8002224:	4293      	cmp	r3, r2
 8002226:	d100      	bne.n	800222a <memset+0xa>
 8002228:	4770      	bx	lr
 800222a:	f803 1b01 	strb.w	r1, [r3], #1
 800222e:	e7f9      	b.n	8002224 <memset+0x4>

08002230 <_puts_r>:
 8002230:	b570      	push	{r4, r5, r6, lr}
 8002232:	460e      	mov	r6, r1
 8002234:	4605      	mov	r5, r0
 8002236:	b118      	cbz	r0, 8002240 <_puts_r+0x10>
 8002238:	6983      	ldr	r3, [r0, #24]
 800223a:	b90b      	cbnz	r3, 8002240 <_puts_r+0x10>
 800223c:	f000 fb16 	bl	800286c <__sinit>
 8002240:	69ab      	ldr	r3, [r5, #24]
 8002242:	68ac      	ldr	r4, [r5, #8]
 8002244:	b913      	cbnz	r3, 800224c <_puts_r+0x1c>
 8002246:	4628      	mov	r0, r5
 8002248:	f000 fb10 	bl	800286c <__sinit>
 800224c:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <_puts_r+0xd0>)
 800224e:	429c      	cmp	r4, r3
 8002250:	d120      	bne.n	8002294 <_puts_r+0x64>
 8002252:	686c      	ldr	r4, [r5, #4]
 8002254:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002256:	07db      	lsls	r3, r3, #31
 8002258:	d405      	bmi.n	8002266 <_puts_r+0x36>
 800225a:	89a3      	ldrh	r3, [r4, #12]
 800225c:	0598      	lsls	r0, r3, #22
 800225e:	d402      	bmi.n	8002266 <_puts_r+0x36>
 8002260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002262:	f000 fba1 	bl	80029a8 <__retarget_lock_acquire_recursive>
 8002266:	89a3      	ldrh	r3, [r4, #12]
 8002268:	0719      	lsls	r1, r3, #28
 800226a:	d51d      	bpl.n	80022a8 <_puts_r+0x78>
 800226c:	6923      	ldr	r3, [r4, #16]
 800226e:	b1db      	cbz	r3, 80022a8 <_puts_r+0x78>
 8002270:	3e01      	subs	r6, #1
 8002272:	68a3      	ldr	r3, [r4, #8]
 8002274:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002278:	3b01      	subs	r3, #1
 800227a:	60a3      	str	r3, [r4, #8]
 800227c:	bb39      	cbnz	r1, 80022ce <_puts_r+0x9e>
 800227e:	2b00      	cmp	r3, #0
 8002280:	da38      	bge.n	80022f4 <_puts_r+0xc4>
 8002282:	4622      	mov	r2, r4
 8002284:	210a      	movs	r1, #10
 8002286:	4628      	mov	r0, r5
 8002288:	f000 f916 	bl	80024b8 <__swbuf_r>
 800228c:	3001      	adds	r0, #1
 800228e:	d011      	beq.n	80022b4 <_puts_r+0x84>
 8002290:	250a      	movs	r5, #10
 8002292:	e011      	b.n	80022b8 <_puts_r+0x88>
 8002294:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <_puts_r+0xd4>)
 8002296:	429c      	cmp	r4, r3
 8002298:	d101      	bne.n	800229e <_puts_r+0x6e>
 800229a:	68ac      	ldr	r4, [r5, #8]
 800229c:	e7da      	b.n	8002254 <_puts_r+0x24>
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <_puts_r+0xd8>)
 80022a0:	429c      	cmp	r4, r3
 80022a2:	bf08      	it	eq
 80022a4:	68ec      	ldreq	r4, [r5, #12]
 80022a6:	e7d5      	b.n	8002254 <_puts_r+0x24>
 80022a8:	4621      	mov	r1, r4
 80022aa:	4628      	mov	r0, r5
 80022ac:	f000 f956 	bl	800255c <__swsetup_r>
 80022b0:	2800      	cmp	r0, #0
 80022b2:	d0dd      	beq.n	8002270 <_puts_r+0x40>
 80022b4:	f04f 35ff 	mov.w	r5, #4294967295
 80022b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022ba:	07da      	lsls	r2, r3, #31
 80022bc:	d405      	bmi.n	80022ca <_puts_r+0x9a>
 80022be:	89a3      	ldrh	r3, [r4, #12]
 80022c0:	059b      	lsls	r3, r3, #22
 80022c2:	d402      	bmi.n	80022ca <_puts_r+0x9a>
 80022c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022c6:	f000 fb70 	bl	80029aa <__retarget_lock_release_recursive>
 80022ca:	4628      	mov	r0, r5
 80022cc:	bd70      	pop	{r4, r5, r6, pc}
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	da04      	bge.n	80022dc <_puts_r+0xac>
 80022d2:	69a2      	ldr	r2, [r4, #24]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	dc06      	bgt.n	80022e6 <_puts_r+0xb6>
 80022d8:	290a      	cmp	r1, #10
 80022da:	d004      	beq.n	80022e6 <_puts_r+0xb6>
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	6022      	str	r2, [r4, #0]
 80022e2:	7019      	strb	r1, [r3, #0]
 80022e4:	e7c5      	b.n	8002272 <_puts_r+0x42>
 80022e6:	4622      	mov	r2, r4
 80022e8:	4628      	mov	r0, r5
 80022ea:	f000 f8e5 	bl	80024b8 <__swbuf_r>
 80022ee:	3001      	adds	r0, #1
 80022f0:	d1bf      	bne.n	8002272 <_puts_r+0x42>
 80022f2:	e7df      	b.n	80022b4 <_puts_r+0x84>
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	250a      	movs	r5, #10
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	6022      	str	r2, [r4, #0]
 80022fc:	701d      	strb	r5, [r3, #0]
 80022fe:	e7db      	b.n	80022b8 <_puts_r+0x88>
 8002300:	08002dcc 	.word	0x08002dcc
 8002304:	08002dec 	.word	0x08002dec
 8002308:	08002dac 	.word	0x08002dac

0800230c <puts>:
 800230c:	4b02      	ldr	r3, [pc, #8]	; (8002318 <puts+0xc>)
 800230e:	4601      	mov	r1, r0
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	f7ff bf8d 	b.w	8002230 <_puts_r>
 8002316:	bf00      	nop
 8002318:	2000000c 	.word	0x2000000c

0800231c <setbuf>:
 800231c:	2900      	cmp	r1, #0
 800231e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002322:	bf0c      	ite	eq
 8002324:	2202      	moveq	r2, #2
 8002326:	2200      	movne	r2, #0
 8002328:	f000 b800 	b.w	800232c <setvbuf>

0800232c <setvbuf>:
 800232c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002330:	461d      	mov	r5, r3
 8002332:	4b5d      	ldr	r3, [pc, #372]	; (80024a8 <setvbuf+0x17c>)
 8002334:	681f      	ldr	r7, [r3, #0]
 8002336:	4604      	mov	r4, r0
 8002338:	460e      	mov	r6, r1
 800233a:	4690      	mov	r8, r2
 800233c:	b127      	cbz	r7, 8002348 <setvbuf+0x1c>
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	b913      	cbnz	r3, 8002348 <setvbuf+0x1c>
 8002342:	4638      	mov	r0, r7
 8002344:	f000 fa92 	bl	800286c <__sinit>
 8002348:	4b58      	ldr	r3, [pc, #352]	; (80024ac <setvbuf+0x180>)
 800234a:	429c      	cmp	r4, r3
 800234c:	d167      	bne.n	800241e <setvbuf+0xf2>
 800234e:	687c      	ldr	r4, [r7, #4]
 8002350:	f1b8 0f02 	cmp.w	r8, #2
 8002354:	d006      	beq.n	8002364 <setvbuf+0x38>
 8002356:	f1b8 0f01 	cmp.w	r8, #1
 800235a:	f200 809f 	bhi.w	800249c <setvbuf+0x170>
 800235e:	2d00      	cmp	r5, #0
 8002360:	f2c0 809c 	blt.w	800249c <setvbuf+0x170>
 8002364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002366:	07db      	lsls	r3, r3, #31
 8002368:	d405      	bmi.n	8002376 <setvbuf+0x4a>
 800236a:	89a3      	ldrh	r3, [r4, #12]
 800236c:	0598      	lsls	r0, r3, #22
 800236e:	d402      	bmi.n	8002376 <setvbuf+0x4a>
 8002370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002372:	f000 fb19 	bl	80029a8 <__retarget_lock_acquire_recursive>
 8002376:	4621      	mov	r1, r4
 8002378:	4638      	mov	r0, r7
 800237a:	f000 f9e3 	bl	8002744 <_fflush_r>
 800237e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002380:	b141      	cbz	r1, 8002394 <setvbuf+0x68>
 8002382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002386:	4299      	cmp	r1, r3
 8002388:	d002      	beq.n	8002390 <setvbuf+0x64>
 800238a:	4638      	mov	r0, r7
 800238c:	f000 fb7a 	bl	8002a84 <_free_r>
 8002390:	2300      	movs	r3, #0
 8002392:	6363      	str	r3, [r4, #52]	; 0x34
 8002394:	2300      	movs	r3, #0
 8002396:	61a3      	str	r3, [r4, #24]
 8002398:	6063      	str	r3, [r4, #4]
 800239a:	89a3      	ldrh	r3, [r4, #12]
 800239c:	0619      	lsls	r1, r3, #24
 800239e:	d503      	bpl.n	80023a8 <setvbuf+0x7c>
 80023a0:	6921      	ldr	r1, [r4, #16]
 80023a2:	4638      	mov	r0, r7
 80023a4:	f000 fb6e 	bl	8002a84 <_free_r>
 80023a8:	89a3      	ldrh	r3, [r4, #12]
 80023aa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80023ae:	f023 0303 	bic.w	r3, r3, #3
 80023b2:	f1b8 0f02 	cmp.w	r8, #2
 80023b6:	81a3      	strh	r3, [r4, #12]
 80023b8:	d06c      	beq.n	8002494 <setvbuf+0x168>
 80023ba:	ab01      	add	r3, sp, #4
 80023bc:	466a      	mov	r2, sp
 80023be:	4621      	mov	r1, r4
 80023c0:	4638      	mov	r0, r7
 80023c2:	f000 faf3 	bl	80029ac <__swhatbuf_r>
 80023c6:	89a3      	ldrh	r3, [r4, #12]
 80023c8:	4318      	orrs	r0, r3
 80023ca:	81a0      	strh	r0, [r4, #12]
 80023cc:	2d00      	cmp	r5, #0
 80023ce:	d130      	bne.n	8002432 <setvbuf+0x106>
 80023d0:	9d00      	ldr	r5, [sp, #0]
 80023d2:	4628      	mov	r0, r5
 80023d4:	f000 fb4e 	bl	8002a74 <malloc>
 80023d8:	4606      	mov	r6, r0
 80023da:	2800      	cmp	r0, #0
 80023dc:	d155      	bne.n	800248a <setvbuf+0x15e>
 80023de:	f8dd 9000 	ldr.w	r9, [sp]
 80023e2:	45a9      	cmp	r9, r5
 80023e4:	d14a      	bne.n	800247c <setvbuf+0x150>
 80023e6:	f04f 35ff 	mov.w	r5, #4294967295
 80023ea:	2200      	movs	r2, #0
 80023ec:	60a2      	str	r2, [r4, #8]
 80023ee:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80023f2:	6022      	str	r2, [r4, #0]
 80023f4:	6122      	str	r2, [r4, #16]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023fc:	6162      	str	r2, [r4, #20]
 80023fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	07d2      	lsls	r2, r2, #31
 8002406:	81a3      	strh	r3, [r4, #12]
 8002408:	d405      	bmi.n	8002416 <setvbuf+0xea>
 800240a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800240e:	d102      	bne.n	8002416 <setvbuf+0xea>
 8002410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002412:	f000 faca 	bl	80029aa <__retarget_lock_release_recursive>
 8002416:	4628      	mov	r0, r5
 8002418:	b003      	add	sp, #12
 800241a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800241e:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <setvbuf+0x184>)
 8002420:	429c      	cmp	r4, r3
 8002422:	d101      	bne.n	8002428 <setvbuf+0xfc>
 8002424:	68bc      	ldr	r4, [r7, #8]
 8002426:	e793      	b.n	8002350 <setvbuf+0x24>
 8002428:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <setvbuf+0x188>)
 800242a:	429c      	cmp	r4, r3
 800242c:	bf08      	it	eq
 800242e:	68fc      	ldreq	r4, [r7, #12]
 8002430:	e78e      	b.n	8002350 <setvbuf+0x24>
 8002432:	2e00      	cmp	r6, #0
 8002434:	d0cd      	beq.n	80023d2 <setvbuf+0xa6>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	b913      	cbnz	r3, 8002440 <setvbuf+0x114>
 800243a:	4638      	mov	r0, r7
 800243c:	f000 fa16 	bl	800286c <__sinit>
 8002440:	f1b8 0f01 	cmp.w	r8, #1
 8002444:	bf08      	it	eq
 8002446:	89a3      	ldrheq	r3, [r4, #12]
 8002448:	6026      	str	r6, [r4, #0]
 800244a:	bf04      	itt	eq
 800244c:	f043 0301 	orreq.w	r3, r3, #1
 8002450:	81a3      	strheq	r3, [r4, #12]
 8002452:	89a2      	ldrh	r2, [r4, #12]
 8002454:	f012 0308 	ands.w	r3, r2, #8
 8002458:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800245c:	d01c      	beq.n	8002498 <setvbuf+0x16c>
 800245e:	07d3      	lsls	r3, r2, #31
 8002460:	bf41      	itttt	mi
 8002462:	2300      	movmi	r3, #0
 8002464:	426d      	negmi	r5, r5
 8002466:	60a3      	strmi	r3, [r4, #8]
 8002468:	61a5      	strmi	r5, [r4, #24]
 800246a:	bf58      	it	pl
 800246c:	60a5      	strpl	r5, [r4, #8]
 800246e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002470:	f015 0501 	ands.w	r5, r5, #1
 8002474:	d115      	bne.n	80024a2 <setvbuf+0x176>
 8002476:	f412 7f00 	tst.w	r2, #512	; 0x200
 800247a:	e7c8      	b.n	800240e <setvbuf+0xe2>
 800247c:	4648      	mov	r0, r9
 800247e:	f000 faf9 	bl	8002a74 <malloc>
 8002482:	4606      	mov	r6, r0
 8002484:	2800      	cmp	r0, #0
 8002486:	d0ae      	beq.n	80023e6 <setvbuf+0xba>
 8002488:	464d      	mov	r5, r9
 800248a:	89a3      	ldrh	r3, [r4, #12]
 800248c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002490:	81a3      	strh	r3, [r4, #12]
 8002492:	e7d0      	b.n	8002436 <setvbuf+0x10a>
 8002494:	2500      	movs	r5, #0
 8002496:	e7a8      	b.n	80023ea <setvbuf+0xbe>
 8002498:	60a3      	str	r3, [r4, #8]
 800249a:	e7e8      	b.n	800246e <setvbuf+0x142>
 800249c:	f04f 35ff 	mov.w	r5, #4294967295
 80024a0:	e7b9      	b.n	8002416 <setvbuf+0xea>
 80024a2:	2500      	movs	r5, #0
 80024a4:	e7b7      	b.n	8002416 <setvbuf+0xea>
 80024a6:	bf00      	nop
 80024a8:	2000000c 	.word	0x2000000c
 80024ac:	08002dcc 	.word	0x08002dcc
 80024b0:	08002dec 	.word	0x08002dec
 80024b4:	08002dac 	.word	0x08002dac

080024b8 <__swbuf_r>:
 80024b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ba:	460e      	mov	r6, r1
 80024bc:	4614      	mov	r4, r2
 80024be:	4605      	mov	r5, r0
 80024c0:	b118      	cbz	r0, 80024ca <__swbuf_r+0x12>
 80024c2:	6983      	ldr	r3, [r0, #24]
 80024c4:	b90b      	cbnz	r3, 80024ca <__swbuf_r+0x12>
 80024c6:	f000 f9d1 	bl	800286c <__sinit>
 80024ca:	4b21      	ldr	r3, [pc, #132]	; (8002550 <__swbuf_r+0x98>)
 80024cc:	429c      	cmp	r4, r3
 80024ce:	d12b      	bne.n	8002528 <__swbuf_r+0x70>
 80024d0:	686c      	ldr	r4, [r5, #4]
 80024d2:	69a3      	ldr	r3, [r4, #24]
 80024d4:	60a3      	str	r3, [r4, #8]
 80024d6:	89a3      	ldrh	r3, [r4, #12]
 80024d8:	071a      	lsls	r2, r3, #28
 80024da:	d52f      	bpl.n	800253c <__swbuf_r+0x84>
 80024dc:	6923      	ldr	r3, [r4, #16]
 80024de:	b36b      	cbz	r3, 800253c <__swbuf_r+0x84>
 80024e0:	6923      	ldr	r3, [r4, #16]
 80024e2:	6820      	ldr	r0, [r4, #0]
 80024e4:	1ac0      	subs	r0, r0, r3
 80024e6:	6963      	ldr	r3, [r4, #20]
 80024e8:	b2f6      	uxtb	r6, r6
 80024ea:	4283      	cmp	r3, r0
 80024ec:	4637      	mov	r7, r6
 80024ee:	dc04      	bgt.n	80024fa <__swbuf_r+0x42>
 80024f0:	4621      	mov	r1, r4
 80024f2:	4628      	mov	r0, r5
 80024f4:	f000 f926 	bl	8002744 <_fflush_r>
 80024f8:	bb30      	cbnz	r0, 8002548 <__swbuf_r+0x90>
 80024fa:	68a3      	ldr	r3, [r4, #8]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	60a3      	str	r3, [r4, #8]
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	6022      	str	r2, [r4, #0]
 8002506:	701e      	strb	r6, [r3, #0]
 8002508:	6963      	ldr	r3, [r4, #20]
 800250a:	3001      	adds	r0, #1
 800250c:	4283      	cmp	r3, r0
 800250e:	d004      	beq.n	800251a <__swbuf_r+0x62>
 8002510:	89a3      	ldrh	r3, [r4, #12]
 8002512:	07db      	lsls	r3, r3, #31
 8002514:	d506      	bpl.n	8002524 <__swbuf_r+0x6c>
 8002516:	2e0a      	cmp	r6, #10
 8002518:	d104      	bne.n	8002524 <__swbuf_r+0x6c>
 800251a:	4621      	mov	r1, r4
 800251c:	4628      	mov	r0, r5
 800251e:	f000 f911 	bl	8002744 <_fflush_r>
 8002522:	b988      	cbnz	r0, 8002548 <__swbuf_r+0x90>
 8002524:	4638      	mov	r0, r7
 8002526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <__swbuf_r+0x9c>)
 800252a:	429c      	cmp	r4, r3
 800252c:	d101      	bne.n	8002532 <__swbuf_r+0x7a>
 800252e:	68ac      	ldr	r4, [r5, #8]
 8002530:	e7cf      	b.n	80024d2 <__swbuf_r+0x1a>
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <__swbuf_r+0xa0>)
 8002534:	429c      	cmp	r4, r3
 8002536:	bf08      	it	eq
 8002538:	68ec      	ldreq	r4, [r5, #12]
 800253a:	e7ca      	b.n	80024d2 <__swbuf_r+0x1a>
 800253c:	4621      	mov	r1, r4
 800253e:	4628      	mov	r0, r5
 8002540:	f000 f80c 	bl	800255c <__swsetup_r>
 8002544:	2800      	cmp	r0, #0
 8002546:	d0cb      	beq.n	80024e0 <__swbuf_r+0x28>
 8002548:	f04f 37ff 	mov.w	r7, #4294967295
 800254c:	e7ea      	b.n	8002524 <__swbuf_r+0x6c>
 800254e:	bf00      	nop
 8002550:	08002dcc 	.word	0x08002dcc
 8002554:	08002dec 	.word	0x08002dec
 8002558:	08002dac 	.word	0x08002dac

0800255c <__swsetup_r>:
 800255c:	4b32      	ldr	r3, [pc, #200]	; (8002628 <__swsetup_r+0xcc>)
 800255e:	b570      	push	{r4, r5, r6, lr}
 8002560:	681d      	ldr	r5, [r3, #0]
 8002562:	4606      	mov	r6, r0
 8002564:	460c      	mov	r4, r1
 8002566:	b125      	cbz	r5, 8002572 <__swsetup_r+0x16>
 8002568:	69ab      	ldr	r3, [r5, #24]
 800256a:	b913      	cbnz	r3, 8002572 <__swsetup_r+0x16>
 800256c:	4628      	mov	r0, r5
 800256e:	f000 f97d 	bl	800286c <__sinit>
 8002572:	4b2e      	ldr	r3, [pc, #184]	; (800262c <__swsetup_r+0xd0>)
 8002574:	429c      	cmp	r4, r3
 8002576:	d10f      	bne.n	8002598 <__swsetup_r+0x3c>
 8002578:	686c      	ldr	r4, [r5, #4]
 800257a:	89a3      	ldrh	r3, [r4, #12]
 800257c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002580:	0719      	lsls	r1, r3, #28
 8002582:	d42c      	bmi.n	80025de <__swsetup_r+0x82>
 8002584:	06dd      	lsls	r5, r3, #27
 8002586:	d411      	bmi.n	80025ac <__swsetup_r+0x50>
 8002588:	2309      	movs	r3, #9
 800258a:	6033      	str	r3, [r6, #0]
 800258c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002590:	81a3      	strh	r3, [r4, #12]
 8002592:	f04f 30ff 	mov.w	r0, #4294967295
 8002596:	e03e      	b.n	8002616 <__swsetup_r+0xba>
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <__swsetup_r+0xd4>)
 800259a:	429c      	cmp	r4, r3
 800259c:	d101      	bne.n	80025a2 <__swsetup_r+0x46>
 800259e:	68ac      	ldr	r4, [r5, #8]
 80025a0:	e7eb      	b.n	800257a <__swsetup_r+0x1e>
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <__swsetup_r+0xd8>)
 80025a4:	429c      	cmp	r4, r3
 80025a6:	bf08      	it	eq
 80025a8:	68ec      	ldreq	r4, [r5, #12]
 80025aa:	e7e6      	b.n	800257a <__swsetup_r+0x1e>
 80025ac:	0758      	lsls	r0, r3, #29
 80025ae:	d512      	bpl.n	80025d6 <__swsetup_r+0x7a>
 80025b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025b2:	b141      	cbz	r1, 80025c6 <__swsetup_r+0x6a>
 80025b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025b8:	4299      	cmp	r1, r3
 80025ba:	d002      	beq.n	80025c2 <__swsetup_r+0x66>
 80025bc:	4630      	mov	r0, r6
 80025be:	f000 fa61 	bl	8002a84 <_free_r>
 80025c2:	2300      	movs	r3, #0
 80025c4:	6363      	str	r3, [r4, #52]	; 0x34
 80025c6:	89a3      	ldrh	r3, [r4, #12]
 80025c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80025cc:	81a3      	strh	r3, [r4, #12]
 80025ce:	2300      	movs	r3, #0
 80025d0:	6063      	str	r3, [r4, #4]
 80025d2:	6923      	ldr	r3, [r4, #16]
 80025d4:	6023      	str	r3, [r4, #0]
 80025d6:	89a3      	ldrh	r3, [r4, #12]
 80025d8:	f043 0308 	orr.w	r3, r3, #8
 80025dc:	81a3      	strh	r3, [r4, #12]
 80025de:	6923      	ldr	r3, [r4, #16]
 80025e0:	b94b      	cbnz	r3, 80025f6 <__swsetup_r+0x9a>
 80025e2:	89a3      	ldrh	r3, [r4, #12]
 80025e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80025e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ec:	d003      	beq.n	80025f6 <__swsetup_r+0x9a>
 80025ee:	4621      	mov	r1, r4
 80025f0:	4630      	mov	r0, r6
 80025f2:	f000 f9ff 	bl	80029f4 <__smakebuf_r>
 80025f6:	89a0      	ldrh	r0, [r4, #12]
 80025f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025fc:	f010 0301 	ands.w	r3, r0, #1
 8002600:	d00a      	beq.n	8002618 <__swsetup_r+0xbc>
 8002602:	2300      	movs	r3, #0
 8002604:	60a3      	str	r3, [r4, #8]
 8002606:	6963      	ldr	r3, [r4, #20]
 8002608:	425b      	negs	r3, r3
 800260a:	61a3      	str	r3, [r4, #24]
 800260c:	6923      	ldr	r3, [r4, #16]
 800260e:	b943      	cbnz	r3, 8002622 <__swsetup_r+0xc6>
 8002610:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002614:	d1ba      	bne.n	800258c <__swsetup_r+0x30>
 8002616:	bd70      	pop	{r4, r5, r6, pc}
 8002618:	0781      	lsls	r1, r0, #30
 800261a:	bf58      	it	pl
 800261c:	6963      	ldrpl	r3, [r4, #20]
 800261e:	60a3      	str	r3, [r4, #8]
 8002620:	e7f4      	b.n	800260c <__swsetup_r+0xb0>
 8002622:	2000      	movs	r0, #0
 8002624:	e7f7      	b.n	8002616 <__swsetup_r+0xba>
 8002626:	bf00      	nop
 8002628:	2000000c 	.word	0x2000000c
 800262c:	08002dcc 	.word	0x08002dcc
 8002630:	08002dec 	.word	0x08002dec
 8002634:	08002dac 	.word	0x08002dac

08002638 <__sflush_r>:
 8002638:	898a      	ldrh	r2, [r1, #12]
 800263a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800263e:	4605      	mov	r5, r0
 8002640:	0710      	lsls	r0, r2, #28
 8002642:	460c      	mov	r4, r1
 8002644:	d458      	bmi.n	80026f8 <__sflush_r+0xc0>
 8002646:	684b      	ldr	r3, [r1, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	dc05      	bgt.n	8002658 <__sflush_r+0x20>
 800264c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	dc02      	bgt.n	8002658 <__sflush_r+0x20>
 8002652:	2000      	movs	r0, #0
 8002654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800265a:	2e00      	cmp	r6, #0
 800265c:	d0f9      	beq.n	8002652 <__sflush_r+0x1a>
 800265e:	2300      	movs	r3, #0
 8002660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002664:	682f      	ldr	r7, [r5, #0]
 8002666:	602b      	str	r3, [r5, #0]
 8002668:	d032      	beq.n	80026d0 <__sflush_r+0x98>
 800266a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800266c:	89a3      	ldrh	r3, [r4, #12]
 800266e:	075a      	lsls	r2, r3, #29
 8002670:	d505      	bpl.n	800267e <__sflush_r+0x46>
 8002672:	6863      	ldr	r3, [r4, #4]
 8002674:	1ac0      	subs	r0, r0, r3
 8002676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002678:	b10b      	cbz	r3, 800267e <__sflush_r+0x46>
 800267a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800267c:	1ac0      	subs	r0, r0, r3
 800267e:	2300      	movs	r3, #0
 8002680:	4602      	mov	r2, r0
 8002682:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002684:	6a21      	ldr	r1, [r4, #32]
 8002686:	4628      	mov	r0, r5
 8002688:	47b0      	blx	r6
 800268a:	1c43      	adds	r3, r0, #1
 800268c:	89a3      	ldrh	r3, [r4, #12]
 800268e:	d106      	bne.n	800269e <__sflush_r+0x66>
 8002690:	6829      	ldr	r1, [r5, #0]
 8002692:	291d      	cmp	r1, #29
 8002694:	d82c      	bhi.n	80026f0 <__sflush_r+0xb8>
 8002696:	4a2a      	ldr	r2, [pc, #168]	; (8002740 <__sflush_r+0x108>)
 8002698:	40ca      	lsrs	r2, r1
 800269a:	07d6      	lsls	r6, r2, #31
 800269c:	d528      	bpl.n	80026f0 <__sflush_r+0xb8>
 800269e:	2200      	movs	r2, #0
 80026a0:	6062      	str	r2, [r4, #4]
 80026a2:	04d9      	lsls	r1, r3, #19
 80026a4:	6922      	ldr	r2, [r4, #16]
 80026a6:	6022      	str	r2, [r4, #0]
 80026a8:	d504      	bpl.n	80026b4 <__sflush_r+0x7c>
 80026aa:	1c42      	adds	r2, r0, #1
 80026ac:	d101      	bne.n	80026b2 <__sflush_r+0x7a>
 80026ae:	682b      	ldr	r3, [r5, #0]
 80026b0:	b903      	cbnz	r3, 80026b4 <__sflush_r+0x7c>
 80026b2:	6560      	str	r0, [r4, #84]	; 0x54
 80026b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026b6:	602f      	str	r7, [r5, #0]
 80026b8:	2900      	cmp	r1, #0
 80026ba:	d0ca      	beq.n	8002652 <__sflush_r+0x1a>
 80026bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026c0:	4299      	cmp	r1, r3
 80026c2:	d002      	beq.n	80026ca <__sflush_r+0x92>
 80026c4:	4628      	mov	r0, r5
 80026c6:	f000 f9dd 	bl	8002a84 <_free_r>
 80026ca:	2000      	movs	r0, #0
 80026cc:	6360      	str	r0, [r4, #52]	; 0x34
 80026ce:	e7c1      	b.n	8002654 <__sflush_r+0x1c>
 80026d0:	6a21      	ldr	r1, [r4, #32]
 80026d2:	2301      	movs	r3, #1
 80026d4:	4628      	mov	r0, r5
 80026d6:	47b0      	blx	r6
 80026d8:	1c41      	adds	r1, r0, #1
 80026da:	d1c7      	bne.n	800266c <__sflush_r+0x34>
 80026dc:	682b      	ldr	r3, [r5, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0c4      	beq.n	800266c <__sflush_r+0x34>
 80026e2:	2b1d      	cmp	r3, #29
 80026e4:	d001      	beq.n	80026ea <__sflush_r+0xb2>
 80026e6:	2b16      	cmp	r3, #22
 80026e8:	d101      	bne.n	80026ee <__sflush_r+0xb6>
 80026ea:	602f      	str	r7, [r5, #0]
 80026ec:	e7b1      	b.n	8002652 <__sflush_r+0x1a>
 80026ee:	89a3      	ldrh	r3, [r4, #12]
 80026f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f4:	81a3      	strh	r3, [r4, #12]
 80026f6:	e7ad      	b.n	8002654 <__sflush_r+0x1c>
 80026f8:	690f      	ldr	r7, [r1, #16]
 80026fa:	2f00      	cmp	r7, #0
 80026fc:	d0a9      	beq.n	8002652 <__sflush_r+0x1a>
 80026fe:	0793      	lsls	r3, r2, #30
 8002700:	680e      	ldr	r6, [r1, #0]
 8002702:	bf08      	it	eq
 8002704:	694b      	ldreq	r3, [r1, #20]
 8002706:	600f      	str	r7, [r1, #0]
 8002708:	bf18      	it	ne
 800270a:	2300      	movne	r3, #0
 800270c:	eba6 0807 	sub.w	r8, r6, r7
 8002710:	608b      	str	r3, [r1, #8]
 8002712:	f1b8 0f00 	cmp.w	r8, #0
 8002716:	dd9c      	ble.n	8002652 <__sflush_r+0x1a>
 8002718:	6a21      	ldr	r1, [r4, #32]
 800271a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800271c:	4643      	mov	r3, r8
 800271e:	463a      	mov	r2, r7
 8002720:	4628      	mov	r0, r5
 8002722:	47b0      	blx	r6
 8002724:	2800      	cmp	r0, #0
 8002726:	dc06      	bgt.n	8002736 <__sflush_r+0xfe>
 8002728:	89a3      	ldrh	r3, [r4, #12]
 800272a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800272e:	81a3      	strh	r3, [r4, #12]
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	e78e      	b.n	8002654 <__sflush_r+0x1c>
 8002736:	4407      	add	r7, r0
 8002738:	eba8 0800 	sub.w	r8, r8, r0
 800273c:	e7e9      	b.n	8002712 <__sflush_r+0xda>
 800273e:	bf00      	nop
 8002740:	20400001 	.word	0x20400001

08002744 <_fflush_r>:
 8002744:	b538      	push	{r3, r4, r5, lr}
 8002746:	690b      	ldr	r3, [r1, #16]
 8002748:	4605      	mov	r5, r0
 800274a:	460c      	mov	r4, r1
 800274c:	b913      	cbnz	r3, 8002754 <_fflush_r+0x10>
 800274e:	2500      	movs	r5, #0
 8002750:	4628      	mov	r0, r5
 8002752:	bd38      	pop	{r3, r4, r5, pc}
 8002754:	b118      	cbz	r0, 800275e <_fflush_r+0x1a>
 8002756:	6983      	ldr	r3, [r0, #24]
 8002758:	b90b      	cbnz	r3, 800275e <_fflush_r+0x1a>
 800275a:	f000 f887 	bl	800286c <__sinit>
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <_fflush_r+0x6c>)
 8002760:	429c      	cmp	r4, r3
 8002762:	d11b      	bne.n	800279c <_fflush_r+0x58>
 8002764:	686c      	ldr	r4, [r5, #4]
 8002766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0ef      	beq.n	800274e <_fflush_r+0xa>
 800276e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002770:	07d0      	lsls	r0, r2, #31
 8002772:	d404      	bmi.n	800277e <_fflush_r+0x3a>
 8002774:	0599      	lsls	r1, r3, #22
 8002776:	d402      	bmi.n	800277e <_fflush_r+0x3a>
 8002778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800277a:	f000 f915 	bl	80029a8 <__retarget_lock_acquire_recursive>
 800277e:	4628      	mov	r0, r5
 8002780:	4621      	mov	r1, r4
 8002782:	f7ff ff59 	bl	8002638 <__sflush_r>
 8002786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002788:	07da      	lsls	r2, r3, #31
 800278a:	4605      	mov	r5, r0
 800278c:	d4e0      	bmi.n	8002750 <_fflush_r+0xc>
 800278e:	89a3      	ldrh	r3, [r4, #12]
 8002790:	059b      	lsls	r3, r3, #22
 8002792:	d4dd      	bmi.n	8002750 <_fflush_r+0xc>
 8002794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002796:	f000 f908 	bl	80029aa <__retarget_lock_release_recursive>
 800279a:	e7d9      	b.n	8002750 <_fflush_r+0xc>
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <_fflush_r+0x70>)
 800279e:	429c      	cmp	r4, r3
 80027a0:	d101      	bne.n	80027a6 <_fflush_r+0x62>
 80027a2:	68ac      	ldr	r4, [r5, #8]
 80027a4:	e7df      	b.n	8002766 <_fflush_r+0x22>
 80027a6:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <_fflush_r+0x74>)
 80027a8:	429c      	cmp	r4, r3
 80027aa:	bf08      	it	eq
 80027ac:	68ec      	ldreq	r4, [r5, #12]
 80027ae:	e7da      	b.n	8002766 <_fflush_r+0x22>
 80027b0:	08002dcc 	.word	0x08002dcc
 80027b4:	08002dec 	.word	0x08002dec
 80027b8:	08002dac 	.word	0x08002dac

080027bc <std>:
 80027bc:	2300      	movs	r3, #0
 80027be:	b510      	push	{r4, lr}
 80027c0:	4604      	mov	r4, r0
 80027c2:	e9c0 3300 	strd	r3, r3, [r0]
 80027c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80027ca:	6083      	str	r3, [r0, #8]
 80027cc:	8181      	strh	r1, [r0, #12]
 80027ce:	6643      	str	r3, [r0, #100]	; 0x64
 80027d0:	81c2      	strh	r2, [r0, #14]
 80027d2:	6183      	str	r3, [r0, #24]
 80027d4:	4619      	mov	r1, r3
 80027d6:	2208      	movs	r2, #8
 80027d8:	305c      	adds	r0, #92	; 0x5c
 80027da:	f7ff fd21 	bl	8002220 <memset>
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <std+0x38>)
 80027e0:	6263      	str	r3, [r4, #36]	; 0x24
 80027e2:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <std+0x3c>)
 80027e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <std+0x40>)
 80027e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027ea:	4b05      	ldr	r3, [pc, #20]	; (8002800 <std+0x44>)
 80027ec:	6224      	str	r4, [r4, #32]
 80027ee:	6323      	str	r3, [r4, #48]	; 0x30
 80027f0:	bd10      	pop	{r4, pc}
 80027f2:	bf00      	nop
 80027f4:	08002bf9 	.word	0x08002bf9
 80027f8:	08002c1b 	.word	0x08002c1b
 80027fc:	08002c53 	.word	0x08002c53
 8002800:	08002c77 	.word	0x08002c77

08002804 <_cleanup_r>:
 8002804:	4901      	ldr	r1, [pc, #4]	; (800280c <_cleanup_r+0x8>)
 8002806:	f000 b8af 	b.w	8002968 <_fwalk_reent>
 800280a:	bf00      	nop
 800280c:	08002745 	.word	0x08002745

08002810 <__sfmoreglue>:
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	1e4a      	subs	r2, r1, #1
 8002814:	2568      	movs	r5, #104	; 0x68
 8002816:	4355      	muls	r5, r2
 8002818:	460e      	mov	r6, r1
 800281a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800281e:	f000 f981 	bl	8002b24 <_malloc_r>
 8002822:	4604      	mov	r4, r0
 8002824:	b140      	cbz	r0, 8002838 <__sfmoreglue+0x28>
 8002826:	2100      	movs	r1, #0
 8002828:	e9c0 1600 	strd	r1, r6, [r0]
 800282c:	300c      	adds	r0, #12
 800282e:	60a0      	str	r0, [r4, #8]
 8002830:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002834:	f7ff fcf4 	bl	8002220 <memset>
 8002838:	4620      	mov	r0, r4
 800283a:	bd70      	pop	{r4, r5, r6, pc}

0800283c <__sfp_lock_acquire>:
 800283c:	4801      	ldr	r0, [pc, #4]	; (8002844 <__sfp_lock_acquire+0x8>)
 800283e:	f000 b8b3 	b.w	80029a8 <__retarget_lock_acquire_recursive>
 8002842:	bf00      	nop
 8002844:	200000e8 	.word	0x200000e8

08002848 <__sfp_lock_release>:
 8002848:	4801      	ldr	r0, [pc, #4]	; (8002850 <__sfp_lock_release+0x8>)
 800284a:	f000 b8ae 	b.w	80029aa <__retarget_lock_release_recursive>
 800284e:	bf00      	nop
 8002850:	200000e8 	.word	0x200000e8

08002854 <__sinit_lock_acquire>:
 8002854:	4801      	ldr	r0, [pc, #4]	; (800285c <__sinit_lock_acquire+0x8>)
 8002856:	f000 b8a7 	b.w	80029a8 <__retarget_lock_acquire_recursive>
 800285a:	bf00      	nop
 800285c:	200000e3 	.word	0x200000e3

08002860 <__sinit_lock_release>:
 8002860:	4801      	ldr	r0, [pc, #4]	; (8002868 <__sinit_lock_release+0x8>)
 8002862:	f000 b8a2 	b.w	80029aa <__retarget_lock_release_recursive>
 8002866:	bf00      	nop
 8002868:	200000e3 	.word	0x200000e3

0800286c <__sinit>:
 800286c:	b510      	push	{r4, lr}
 800286e:	4604      	mov	r4, r0
 8002870:	f7ff fff0 	bl	8002854 <__sinit_lock_acquire>
 8002874:	69a3      	ldr	r3, [r4, #24]
 8002876:	b11b      	cbz	r3, 8002880 <__sinit+0x14>
 8002878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800287c:	f7ff bff0 	b.w	8002860 <__sinit_lock_release>
 8002880:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002884:	6523      	str	r3, [r4, #80]	; 0x50
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <__sinit+0x68>)
 8002888:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <__sinit+0x6c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	62a2      	str	r2, [r4, #40]	; 0x28
 800288e:	42a3      	cmp	r3, r4
 8002890:	bf04      	itt	eq
 8002892:	2301      	moveq	r3, #1
 8002894:	61a3      	streq	r3, [r4, #24]
 8002896:	4620      	mov	r0, r4
 8002898:	f000 f820 	bl	80028dc <__sfp>
 800289c:	6060      	str	r0, [r4, #4]
 800289e:	4620      	mov	r0, r4
 80028a0:	f000 f81c 	bl	80028dc <__sfp>
 80028a4:	60a0      	str	r0, [r4, #8]
 80028a6:	4620      	mov	r0, r4
 80028a8:	f000 f818 	bl	80028dc <__sfp>
 80028ac:	2200      	movs	r2, #0
 80028ae:	60e0      	str	r0, [r4, #12]
 80028b0:	2104      	movs	r1, #4
 80028b2:	6860      	ldr	r0, [r4, #4]
 80028b4:	f7ff ff82 	bl	80027bc <std>
 80028b8:	68a0      	ldr	r0, [r4, #8]
 80028ba:	2201      	movs	r2, #1
 80028bc:	2109      	movs	r1, #9
 80028be:	f7ff ff7d 	bl	80027bc <std>
 80028c2:	68e0      	ldr	r0, [r4, #12]
 80028c4:	2202      	movs	r2, #2
 80028c6:	2112      	movs	r1, #18
 80028c8:	f7ff ff78 	bl	80027bc <std>
 80028cc:	2301      	movs	r3, #1
 80028ce:	61a3      	str	r3, [r4, #24]
 80028d0:	e7d2      	b.n	8002878 <__sinit+0xc>
 80028d2:	bf00      	nop
 80028d4:	08002da8 	.word	0x08002da8
 80028d8:	08002805 	.word	0x08002805

080028dc <__sfp>:
 80028dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028de:	4607      	mov	r7, r0
 80028e0:	f7ff ffac 	bl	800283c <__sfp_lock_acquire>
 80028e4:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <__sfp+0x84>)
 80028e6:	681e      	ldr	r6, [r3, #0]
 80028e8:	69b3      	ldr	r3, [r6, #24]
 80028ea:	b913      	cbnz	r3, 80028f2 <__sfp+0x16>
 80028ec:	4630      	mov	r0, r6
 80028ee:	f7ff ffbd 	bl	800286c <__sinit>
 80028f2:	3648      	adds	r6, #72	; 0x48
 80028f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80028f8:	3b01      	subs	r3, #1
 80028fa:	d503      	bpl.n	8002904 <__sfp+0x28>
 80028fc:	6833      	ldr	r3, [r6, #0]
 80028fe:	b30b      	cbz	r3, 8002944 <__sfp+0x68>
 8002900:	6836      	ldr	r6, [r6, #0]
 8002902:	e7f7      	b.n	80028f4 <__sfp+0x18>
 8002904:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002908:	b9d5      	cbnz	r5, 8002940 <__sfp+0x64>
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <__sfp+0x88>)
 800290c:	60e3      	str	r3, [r4, #12]
 800290e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002912:	6665      	str	r5, [r4, #100]	; 0x64
 8002914:	f000 f847 	bl	80029a6 <__retarget_lock_init_recursive>
 8002918:	f7ff ff96 	bl	8002848 <__sfp_lock_release>
 800291c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002920:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002924:	6025      	str	r5, [r4, #0]
 8002926:	61a5      	str	r5, [r4, #24]
 8002928:	2208      	movs	r2, #8
 800292a:	4629      	mov	r1, r5
 800292c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002930:	f7ff fc76 	bl	8002220 <memset>
 8002934:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002938:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800293c:	4620      	mov	r0, r4
 800293e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002940:	3468      	adds	r4, #104	; 0x68
 8002942:	e7d9      	b.n	80028f8 <__sfp+0x1c>
 8002944:	2104      	movs	r1, #4
 8002946:	4638      	mov	r0, r7
 8002948:	f7ff ff62 	bl	8002810 <__sfmoreglue>
 800294c:	4604      	mov	r4, r0
 800294e:	6030      	str	r0, [r6, #0]
 8002950:	2800      	cmp	r0, #0
 8002952:	d1d5      	bne.n	8002900 <__sfp+0x24>
 8002954:	f7ff ff78 	bl	8002848 <__sfp_lock_release>
 8002958:	230c      	movs	r3, #12
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	e7ee      	b.n	800293c <__sfp+0x60>
 800295e:	bf00      	nop
 8002960:	08002da8 	.word	0x08002da8
 8002964:	ffff0001 	.word	0xffff0001

08002968 <_fwalk_reent>:
 8002968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800296c:	4606      	mov	r6, r0
 800296e:	4688      	mov	r8, r1
 8002970:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002974:	2700      	movs	r7, #0
 8002976:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800297a:	f1b9 0901 	subs.w	r9, r9, #1
 800297e:	d505      	bpl.n	800298c <_fwalk_reent+0x24>
 8002980:	6824      	ldr	r4, [r4, #0]
 8002982:	2c00      	cmp	r4, #0
 8002984:	d1f7      	bne.n	8002976 <_fwalk_reent+0xe>
 8002986:	4638      	mov	r0, r7
 8002988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800298c:	89ab      	ldrh	r3, [r5, #12]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d907      	bls.n	80029a2 <_fwalk_reent+0x3a>
 8002992:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002996:	3301      	adds	r3, #1
 8002998:	d003      	beq.n	80029a2 <_fwalk_reent+0x3a>
 800299a:	4629      	mov	r1, r5
 800299c:	4630      	mov	r0, r6
 800299e:	47c0      	blx	r8
 80029a0:	4307      	orrs	r7, r0
 80029a2:	3568      	adds	r5, #104	; 0x68
 80029a4:	e7e9      	b.n	800297a <_fwalk_reent+0x12>

080029a6 <__retarget_lock_init_recursive>:
 80029a6:	4770      	bx	lr

080029a8 <__retarget_lock_acquire_recursive>:
 80029a8:	4770      	bx	lr

080029aa <__retarget_lock_release_recursive>:
 80029aa:	4770      	bx	lr

080029ac <__swhatbuf_r>:
 80029ac:	b570      	push	{r4, r5, r6, lr}
 80029ae:	460e      	mov	r6, r1
 80029b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029b4:	2900      	cmp	r1, #0
 80029b6:	b096      	sub	sp, #88	; 0x58
 80029b8:	4614      	mov	r4, r2
 80029ba:	461d      	mov	r5, r3
 80029bc:	da07      	bge.n	80029ce <__swhatbuf_r+0x22>
 80029be:	2300      	movs	r3, #0
 80029c0:	602b      	str	r3, [r5, #0]
 80029c2:	89b3      	ldrh	r3, [r6, #12]
 80029c4:	061a      	lsls	r2, r3, #24
 80029c6:	d410      	bmi.n	80029ea <__swhatbuf_r+0x3e>
 80029c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029cc:	e00e      	b.n	80029ec <__swhatbuf_r+0x40>
 80029ce:	466a      	mov	r2, sp
 80029d0:	f000 f978 	bl	8002cc4 <_fstat_r>
 80029d4:	2800      	cmp	r0, #0
 80029d6:	dbf2      	blt.n	80029be <__swhatbuf_r+0x12>
 80029d8:	9a01      	ldr	r2, [sp, #4]
 80029da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80029de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80029e2:	425a      	negs	r2, r3
 80029e4:	415a      	adcs	r2, r3
 80029e6:	602a      	str	r2, [r5, #0]
 80029e8:	e7ee      	b.n	80029c8 <__swhatbuf_r+0x1c>
 80029ea:	2340      	movs	r3, #64	; 0x40
 80029ec:	2000      	movs	r0, #0
 80029ee:	6023      	str	r3, [r4, #0]
 80029f0:	b016      	add	sp, #88	; 0x58
 80029f2:	bd70      	pop	{r4, r5, r6, pc}

080029f4 <__smakebuf_r>:
 80029f4:	898b      	ldrh	r3, [r1, #12]
 80029f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80029f8:	079d      	lsls	r5, r3, #30
 80029fa:	4606      	mov	r6, r0
 80029fc:	460c      	mov	r4, r1
 80029fe:	d507      	bpl.n	8002a10 <__smakebuf_r+0x1c>
 8002a00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a04:	6023      	str	r3, [r4, #0]
 8002a06:	6123      	str	r3, [r4, #16]
 8002a08:	2301      	movs	r3, #1
 8002a0a:	6163      	str	r3, [r4, #20]
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd70      	pop	{r4, r5, r6, pc}
 8002a10:	ab01      	add	r3, sp, #4
 8002a12:	466a      	mov	r2, sp
 8002a14:	f7ff ffca 	bl	80029ac <__swhatbuf_r>
 8002a18:	9900      	ldr	r1, [sp, #0]
 8002a1a:	4605      	mov	r5, r0
 8002a1c:	4630      	mov	r0, r6
 8002a1e:	f000 f881 	bl	8002b24 <_malloc_r>
 8002a22:	b948      	cbnz	r0, 8002a38 <__smakebuf_r+0x44>
 8002a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a28:	059a      	lsls	r2, r3, #22
 8002a2a:	d4ef      	bmi.n	8002a0c <__smakebuf_r+0x18>
 8002a2c:	f023 0303 	bic.w	r3, r3, #3
 8002a30:	f043 0302 	orr.w	r3, r3, #2
 8002a34:	81a3      	strh	r3, [r4, #12]
 8002a36:	e7e3      	b.n	8002a00 <__smakebuf_r+0xc>
 8002a38:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <__smakebuf_r+0x7c>)
 8002a3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a3c:	89a3      	ldrh	r3, [r4, #12]
 8002a3e:	6020      	str	r0, [r4, #0]
 8002a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a44:	81a3      	strh	r3, [r4, #12]
 8002a46:	9b00      	ldr	r3, [sp, #0]
 8002a48:	6163      	str	r3, [r4, #20]
 8002a4a:	9b01      	ldr	r3, [sp, #4]
 8002a4c:	6120      	str	r0, [r4, #16]
 8002a4e:	b15b      	cbz	r3, 8002a68 <__smakebuf_r+0x74>
 8002a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a54:	4630      	mov	r0, r6
 8002a56:	f000 f947 	bl	8002ce8 <_isatty_r>
 8002a5a:	b128      	cbz	r0, 8002a68 <__smakebuf_r+0x74>
 8002a5c:	89a3      	ldrh	r3, [r4, #12]
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	81a3      	strh	r3, [r4, #12]
 8002a68:	89a0      	ldrh	r0, [r4, #12]
 8002a6a:	4305      	orrs	r5, r0
 8002a6c:	81a5      	strh	r5, [r4, #12]
 8002a6e:	e7cd      	b.n	8002a0c <__smakebuf_r+0x18>
 8002a70:	08002805 	.word	0x08002805

08002a74 <malloc>:
 8002a74:	4b02      	ldr	r3, [pc, #8]	; (8002a80 <malloc+0xc>)
 8002a76:	4601      	mov	r1, r0
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	f000 b853 	b.w	8002b24 <_malloc_r>
 8002a7e:	bf00      	nop
 8002a80:	2000000c 	.word	0x2000000c

08002a84 <_free_r>:
 8002a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a86:	2900      	cmp	r1, #0
 8002a88:	d048      	beq.n	8002b1c <_free_r+0x98>
 8002a8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a8e:	9001      	str	r0, [sp, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f1a1 0404 	sub.w	r4, r1, #4
 8002a96:	bfb8      	it	lt
 8002a98:	18e4      	addlt	r4, r4, r3
 8002a9a:	f000 f947 	bl	8002d2c <__malloc_lock>
 8002a9e:	4a20      	ldr	r2, [pc, #128]	; (8002b20 <_free_r+0x9c>)
 8002aa0:	9801      	ldr	r0, [sp, #4]
 8002aa2:	6813      	ldr	r3, [r2, #0]
 8002aa4:	4615      	mov	r5, r2
 8002aa6:	b933      	cbnz	r3, 8002ab6 <_free_r+0x32>
 8002aa8:	6063      	str	r3, [r4, #4]
 8002aaa:	6014      	str	r4, [r2, #0]
 8002aac:	b003      	add	sp, #12
 8002aae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ab2:	f000 b941 	b.w	8002d38 <__malloc_unlock>
 8002ab6:	42a3      	cmp	r3, r4
 8002ab8:	d90b      	bls.n	8002ad2 <_free_r+0x4e>
 8002aba:	6821      	ldr	r1, [r4, #0]
 8002abc:	1862      	adds	r2, r4, r1
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	bf04      	itt	eq
 8002ac2:	681a      	ldreq	r2, [r3, #0]
 8002ac4:	685b      	ldreq	r3, [r3, #4]
 8002ac6:	6063      	str	r3, [r4, #4]
 8002ac8:	bf04      	itt	eq
 8002aca:	1852      	addeq	r2, r2, r1
 8002acc:	6022      	streq	r2, [r4, #0]
 8002ace:	602c      	str	r4, [r5, #0]
 8002ad0:	e7ec      	b.n	8002aac <_free_r+0x28>
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	b10b      	cbz	r3, 8002adc <_free_r+0x58>
 8002ad8:	42a3      	cmp	r3, r4
 8002ada:	d9fa      	bls.n	8002ad2 <_free_r+0x4e>
 8002adc:	6811      	ldr	r1, [r2, #0]
 8002ade:	1855      	adds	r5, r2, r1
 8002ae0:	42a5      	cmp	r5, r4
 8002ae2:	d10b      	bne.n	8002afc <_free_r+0x78>
 8002ae4:	6824      	ldr	r4, [r4, #0]
 8002ae6:	4421      	add	r1, r4
 8002ae8:	1854      	adds	r4, r2, r1
 8002aea:	42a3      	cmp	r3, r4
 8002aec:	6011      	str	r1, [r2, #0]
 8002aee:	d1dd      	bne.n	8002aac <_free_r+0x28>
 8002af0:	681c      	ldr	r4, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	6053      	str	r3, [r2, #4]
 8002af6:	4421      	add	r1, r4
 8002af8:	6011      	str	r1, [r2, #0]
 8002afa:	e7d7      	b.n	8002aac <_free_r+0x28>
 8002afc:	d902      	bls.n	8002b04 <_free_r+0x80>
 8002afe:	230c      	movs	r3, #12
 8002b00:	6003      	str	r3, [r0, #0]
 8002b02:	e7d3      	b.n	8002aac <_free_r+0x28>
 8002b04:	6825      	ldr	r5, [r4, #0]
 8002b06:	1961      	adds	r1, r4, r5
 8002b08:	428b      	cmp	r3, r1
 8002b0a:	bf04      	itt	eq
 8002b0c:	6819      	ldreq	r1, [r3, #0]
 8002b0e:	685b      	ldreq	r3, [r3, #4]
 8002b10:	6063      	str	r3, [r4, #4]
 8002b12:	bf04      	itt	eq
 8002b14:	1949      	addeq	r1, r1, r5
 8002b16:	6021      	streq	r1, [r4, #0]
 8002b18:	6054      	str	r4, [r2, #4]
 8002b1a:	e7c7      	b.n	8002aac <_free_r+0x28>
 8002b1c:	b003      	add	sp, #12
 8002b1e:	bd30      	pop	{r4, r5, pc}
 8002b20:	20000090 	.word	0x20000090

08002b24 <_malloc_r>:
 8002b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b26:	1ccd      	adds	r5, r1, #3
 8002b28:	f025 0503 	bic.w	r5, r5, #3
 8002b2c:	3508      	adds	r5, #8
 8002b2e:	2d0c      	cmp	r5, #12
 8002b30:	bf38      	it	cc
 8002b32:	250c      	movcc	r5, #12
 8002b34:	2d00      	cmp	r5, #0
 8002b36:	4606      	mov	r6, r0
 8002b38:	db01      	blt.n	8002b3e <_malloc_r+0x1a>
 8002b3a:	42a9      	cmp	r1, r5
 8002b3c:	d903      	bls.n	8002b46 <_malloc_r+0x22>
 8002b3e:	230c      	movs	r3, #12
 8002b40:	6033      	str	r3, [r6, #0]
 8002b42:	2000      	movs	r0, #0
 8002b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b46:	f000 f8f1 	bl	8002d2c <__malloc_lock>
 8002b4a:	4921      	ldr	r1, [pc, #132]	; (8002bd0 <_malloc_r+0xac>)
 8002b4c:	680a      	ldr	r2, [r1, #0]
 8002b4e:	4614      	mov	r4, r2
 8002b50:	b99c      	cbnz	r4, 8002b7a <_malloc_r+0x56>
 8002b52:	4f20      	ldr	r7, [pc, #128]	; (8002bd4 <_malloc_r+0xb0>)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b923      	cbnz	r3, 8002b62 <_malloc_r+0x3e>
 8002b58:	4621      	mov	r1, r4
 8002b5a:	4630      	mov	r0, r6
 8002b5c:	f000 f83c 	bl	8002bd8 <_sbrk_r>
 8002b60:	6038      	str	r0, [r7, #0]
 8002b62:	4629      	mov	r1, r5
 8002b64:	4630      	mov	r0, r6
 8002b66:	f000 f837 	bl	8002bd8 <_sbrk_r>
 8002b6a:	1c43      	adds	r3, r0, #1
 8002b6c:	d123      	bne.n	8002bb6 <_malloc_r+0x92>
 8002b6e:	230c      	movs	r3, #12
 8002b70:	6033      	str	r3, [r6, #0]
 8002b72:	4630      	mov	r0, r6
 8002b74:	f000 f8e0 	bl	8002d38 <__malloc_unlock>
 8002b78:	e7e3      	b.n	8002b42 <_malloc_r+0x1e>
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	1b5b      	subs	r3, r3, r5
 8002b7e:	d417      	bmi.n	8002bb0 <_malloc_r+0x8c>
 8002b80:	2b0b      	cmp	r3, #11
 8002b82:	d903      	bls.n	8002b8c <_malloc_r+0x68>
 8002b84:	6023      	str	r3, [r4, #0]
 8002b86:	441c      	add	r4, r3
 8002b88:	6025      	str	r5, [r4, #0]
 8002b8a:	e004      	b.n	8002b96 <_malloc_r+0x72>
 8002b8c:	6863      	ldr	r3, [r4, #4]
 8002b8e:	42a2      	cmp	r2, r4
 8002b90:	bf0c      	ite	eq
 8002b92:	600b      	streq	r3, [r1, #0]
 8002b94:	6053      	strne	r3, [r2, #4]
 8002b96:	4630      	mov	r0, r6
 8002b98:	f000 f8ce 	bl	8002d38 <__malloc_unlock>
 8002b9c:	f104 000b 	add.w	r0, r4, #11
 8002ba0:	1d23      	adds	r3, r4, #4
 8002ba2:	f020 0007 	bic.w	r0, r0, #7
 8002ba6:	1ac2      	subs	r2, r0, r3
 8002ba8:	d0cc      	beq.n	8002b44 <_malloc_r+0x20>
 8002baa:	1a1b      	subs	r3, r3, r0
 8002bac:	50a3      	str	r3, [r4, r2]
 8002bae:	e7c9      	b.n	8002b44 <_malloc_r+0x20>
 8002bb0:	4622      	mov	r2, r4
 8002bb2:	6864      	ldr	r4, [r4, #4]
 8002bb4:	e7cc      	b.n	8002b50 <_malloc_r+0x2c>
 8002bb6:	1cc4      	adds	r4, r0, #3
 8002bb8:	f024 0403 	bic.w	r4, r4, #3
 8002bbc:	42a0      	cmp	r0, r4
 8002bbe:	d0e3      	beq.n	8002b88 <_malloc_r+0x64>
 8002bc0:	1a21      	subs	r1, r4, r0
 8002bc2:	4630      	mov	r0, r6
 8002bc4:	f000 f808 	bl	8002bd8 <_sbrk_r>
 8002bc8:	3001      	adds	r0, #1
 8002bca:	d1dd      	bne.n	8002b88 <_malloc_r+0x64>
 8002bcc:	e7cf      	b.n	8002b6e <_malloc_r+0x4a>
 8002bce:	bf00      	nop
 8002bd0:	20000090 	.word	0x20000090
 8002bd4:	20000094 	.word	0x20000094

08002bd8 <_sbrk_r>:
 8002bd8:	b538      	push	{r3, r4, r5, lr}
 8002bda:	4d06      	ldr	r5, [pc, #24]	; (8002bf4 <_sbrk_r+0x1c>)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	4604      	mov	r4, r0
 8002be0:	4608      	mov	r0, r1
 8002be2:	602b      	str	r3, [r5, #0]
 8002be4:	f7fd febe 	bl	8000964 <_sbrk>
 8002be8:	1c43      	adds	r3, r0, #1
 8002bea:	d102      	bne.n	8002bf2 <_sbrk_r+0x1a>
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	b103      	cbz	r3, 8002bf2 <_sbrk_r+0x1a>
 8002bf0:	6023      	str	r3, [r4, #0]
 8002bf2:	bd38      	pop	{r3, r4, r5, pc}
 8002bf4:	200000ec 	.word	0x200000ec

08002bf8 <__sread>:
 8002bf8:	b510      	push	{r4, lr}
 8002bfa:	460c      	mov	r4, r1
 8002bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c00:	f000 f8a0 	bl	8002d44 <_read_r>
 8002c04:	2800      	cmp	r0, #0
 8002c06:	bfab      	itete	ge
 8002c08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8002c0c:	181b      	addge	r3, r3, r0
 8002c0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c12:	bfac      	ite	ge
 8002c14:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c16:	81a3      	strhlt	r3, [r4, #12]
 8002c18:	bd10      	pop	{r4, pc}

08002c1a <__swrite>:
 8002c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c1e:	461f      	mov	r7, r3
 8002c20:	898b      	ldrh	r3, [r1, #12]
 8002c22:	05db      	lsls	r3, r3, #23
 8002c24:	4605      	mov	r5, r0
 8002c26:	460c      	mov	r4, r1
 8002c28:	4616      	mov	r6, r2
 8002c2a:	d505      	bpl.n	8002c38 <__swrite+0x1e>
 8002c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c30:	2302      	movs	r3, #2
 8002c32:	2200      	movs	r2, #0
 8002c34:	f000 f868 	bl	8002d08 <_lseek_r>
 8002c38:	89a3      	ldrh	r3, [r4, #12]
 8002c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c42:	81a3      	strh	r3, [r4, #12]
 8002c44:	4632      	mov	r2, r6
 8002c46:	463b      	mov	r3, r7
 8002c48:	4628      	mov	r0, r5
 8002c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c4e:	f000 b817 	b.w	8002c80 <_write_r>

08002c52 <__sseek>:
 8002c52:	b510      	push	{r4, lr}
 8002c54:	460c      	mov	r4, r1
 8002c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c5a:	f000 f855 	bl	8002d08 <_lseek_r>
 8002c5e:	1c43      	adds	r3, r0, #1
 8002c60:	89a3      	ldrh	r3, [r4, #12]
 8002c62:	bf15      	itete	ne
 8002c64:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c6e:	81a3      	strheq	r3, [r4, #12]
 8002c70:	bf18      	it	ne
 8002c72:	81a3      	strhne	r3, [r4, #12]
 8002c74:	bd10      	pop	{r4, pc}

08002c76 <__sclose>:
 8002c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c7a:	f000 b813 	b.w	8002ca4 <_close_r>
	...

08002c80 <_write_r>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	4d07      	ldr	r5, [pc, #28]	; (8002ca0 <_write_r+0x20>)
 8002c84:	4604      	mov	r4, r0
 8002c86:	4608      	mov	r0, r1
 8002c88:	4611      	mov	r1, r2
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	602a      	str	r2, [r5, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f7fd fe54 	bl	800093c <_write>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d102      	bne.n	8002c9e <_write_r+0x1e>
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	b103      	cbz	r3, 8002c9e <_write_r+0x1e>
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ca0:	200000ec 	.word	0x200000ec

08002ca4 <_close_r>:
 8002ca4:	b538      	push	{r3, r4, r5, lr}
 8002ca6:	4d06      	ldr	r5, [pc, #24]	; (8002cc0 <_close_r+0x1c>)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	4604      	mov	r4, r0
 8002cac:	4608      	mov	r0, r1
 8002cae:	602b      	str	r3, [r5, #0]
 8002cb0:	f7fd fe0f 	bl	80008d2 <_close>
 8002cb4:	1c43      	adds	r3, r0, #1
 8002cb6:	d102      	bne.n	8002cbe <_close_r+0x1a>
 8002cb8:	682b      	ldr	r3, [r5, #0]
 8002cba:	b103      	cbz	r3, 8002cbe <_close_r+0x1a>
 8002cbc:	6023      	str	r3, [r4, #0]
 8002cbe:	bd38      	pop	{r3, r4, r5, pc}
 8002cc0:	200000ec 	.word	0x200000ec

08002cc4 <_fstat_r>:
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	4d07      	ldr	r5, [pc, #28]	; (8002ce4 <_fstat_r+0x20>)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	4604      	mov	r4, r0
 8002ccc:	4608      	mov	r0, r1
 8002cce:	4611      	mov	r1, r2
 8002cd0:	602b      	str	r3, [r5, #0]
 8002cd2:	f7fd fe0a 	bl	80008ea <_fstat>
 8002cd6:	1c43      	adds	r3, r0, #1
 8002cd8:	d102      	bne.n	8002ce0 <_fstat_r+0x1c>
 8002cda:	682b      	ldr	r3, [r5, #0]
 8002cdc:	b103      	cbz	r3, 8002ce0 <_fstat_r+0x1c>
 8002cde:	6023      	str	r3, [r4, #0]
 8002ce0:	bd38      	pop	{r3, r4, r5, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200000ec 	.word	0x200000ec

08002ce8 <_isatty_r>:
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	4d06      	ldr	r5, [pc, #24]	; (8002d04 <_isatty_r+0x1c>)
 8002cec:	2300      	movs	r3, #0
 8002cee:	4604      	mov	r4, r0
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	602b      	str	r3, [r5, #0]
 8002cf4:	f7fd fe09 	bl	800090a <_isatty>
 8002cf8:	1c43      	adds	r3, r0, #1
 8002cfa:	d102      	bne.n	8002d02 <_isatty_r+0x1a>
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	b103      	cbz	r3, 8002d02 <_isatty_r+0x1a>
 8002d00:	6023      	str	r3, [r4, #0]
 8002d02:	bd38      	pop	{r3, r4, r5, pc}
 8002d04:	200000ec 	.word	0x200000ec

08002d08 <_lseek_r>:
 8002d08:	b538      	push	{r3, r4, r5, lr}
 8002d0a:	4d07      	ldr	r5, [pc, #28]	; (8002d28 <_lseek_r+0x20>)
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	4608      	mov	r0, r1
 8002d10:	4611      	mov	r1, r2
 8002d12:	2200      	movs	r2, #0
 8002d14:	602a      	str	r2, [r5, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	f7fd fe02 	bl	8000920 <_lseek>
 8002d1c:	1c43      	adds	r3, r0, #1
 8002d1e:	d102      	bne.n	8002d26 <_lseek_r+0x1e>
 8002d20:	682b      	ldr	r3, [r5, #0]
 8002d22:	b103      	cbz	r3, 8002d26 <_lseek_r+0x1e>
 8002d24:	6023      	str	r3, [r4, #0]
 8002d26:	bd38      	pop	{r3, r4, r5, pc}
 8002d28:	200000ec 	.word	0x200000ec

08002d2c <__malloc_lock>:
 8002d2c:	4801      	ldr	r0, [pc, #4]	; (8002d34 <__malloc_lock+0x8>)
 8002d2e:	f7ff be3b 	b.w	80029a8 <__retarget_lock_acquire_recursive>
 8002d32:	bf00      	nop
 8002d34:	200000e4 	.word	0x200000e4

08002d38 <__malloc_unlock>:
 8002d38:	4801      	ldr	r0, [pc, #4]	; (8002d40 <__malloc_unlock+0x8>)
 8002d3a:	f7ff be36 	b.w	80029aa <__retarget_lock_release_recursive>
 8002d3e:	bf00      	nop
 8002d40:	200000e4 	.word	0x200000e4

08002d44 <_read_r>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	4d07      	ldr	r5, [pc, #28]	; (8002d64 <_read_r+0x20>)
 8002d48:	4604      	mov	r4, r0
 8002d4a:	4608      	mov	r0, r1
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	2200      	movs	r2, #0
 8002d50:	602a      	str	r2, [r5, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	f7fd fda0 	bl	8000898 <_read>
 8002d58:	1c43      	adds	r3, r0, #1
 8002d5a:	d102      	bne.n	8002d62 <_read_r+0x1e>
 8002d5c:	682b      	ldr	r3, [r5, #0]
 8002d5e:	b103      	cbz	r3, 8002d62 <_read_r+0x1e>
 8002d60:	6023      	str	r3, [r4, #0]
 8002d62:	bd38      	pop	{r3, r4, r5, pc}
 8002d64:	200000ec 	.word	0x200000ec

08002d68 <_init>:
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6a:	bf00      	nop
 8002d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6e:	bc08      	pop	{r3}
 8002d70:	469e      	mov	lr, r3
 8002d72:	4770      	bx	lr

08002d74 <_fini>:
 8002d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d76:	bf00      	nop
 8002d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7a:	bc08      	pop	{r3}
 8002d7c:	469e      	mov	lr, r3
 8002d7e:	4770      	bx	lr
